<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="cn"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://son4ta.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://son4ta.github.io/" rel="alternate" type="text/html" hreflang="cn"/><updated>2025-01-05T14:09:43+00:00</updated><id>https://son4ta.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">ISAAC SIM 安装</title><link href="https://son4ta.github.io/blog/2024/isaac/" rel="alternate" type="text/html" title="ISAAC SIM 安装"/><published>2024-12-19T21:32:13+00:00</published><updated>2024-12-19T21:32:13+00:00</updated><id>https://son4ta.github.io/blog/2024/isaac</id><content type="html" xml:base="https://son4ta.github.io/blog/2024/isaac/"><![CDATA[<p>这里假设你在创建环境时已经搞定了pytorch、cuda，没有的话，安装最高版本就行（目前是2.4.0）</p> <p><a href="https://isaac-sim.github.io/IsaacLab/main/source/setup/installation/pip_installation.html">具体教程</a></p> <h2 id="首先pip安装issac-sim">首先，pip安装Issac Sim</h2> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># pip install torch==2.4.0 --index-url https://download.pytorch.org/whl/cu118</span>

pip <span class="nb">install</span> <span class="nt">--upgrade</span> pip

pip <span class="nb">install </span><span class="nv">isaacsim</span><span class="o">==</span>4.2.0.2 isaacsim-extscache-physics<span class="o">==</span>4.2.0.2 isaacsim-extscache-kit<span class="o">==</span>4.2.0.2 isaacsim-extscache-kit-sdk<span class="o">==</span>4.2.0.2 <span class="nt">--extra-index-url</span> https://pypi.nvidia.com
<span class="c"># 最小安装包</span>
pip <span class="nb">install </span>isaacsim-rl isaacsim-replicator isaacsim-extscache-physics isaacsim-extscache-kit-sdk isaacsim-extscache-kit isaacsim-app <span class="nt">--extra-index-url</span> https://pypi.nvidia.com

<span class="c">#测试是否安装成功</span>
isaacsim 
<span class="c">#没有root权限的话 isaacsim --allow-root</span>
</code></pre></div></div> <p>然后同意协议，等一会，他会下载一些注册表之类的东西</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>By installing or using Isaac Sim, I agree to the terms of NVIDIA OMNIVERSE LICENSE AGREEMENT <span class="o">(</span>EULA<span class="o">)</span>
<span class="k">in </span>https://docs.omniverse.nvidia.com/isaacsim/latest/common/NVIDIA_Omniverse_License_Agreement.html

Do you accept the EULA? <span class="o">(</span>Yes/No<span class="o">)</span>: Yes

<span class="o">[</span>Info] <span class="o">[</span>carb] Logging to file: /root/.nvidia-omniverse/logs/Kit/omni.app.mini/0.1/kit_20241220_101512.log
2024-12-20 02:15:12 <span class="o">[</span>0ms] <span class="o">[</span>Warning] <span class="o">[</span>omni.kit.app.plugin] No crash reporter present, dumps uploading isn<span class="s1">'t available.
[0.074s] Failed to solve some dependencies locally, syncing with extension registry...
[0.076s] [ext: omni.kit.async_engine-0.0.1] startup
[0.081s] [ext: omni.client-1.2.0] startup
[0.131s] [ext: omni.kit.registry.nucleus-0.0.0] startup
# ......
[7042.665s] [ext: omni.kit.clipboard-1.0.4] startup
[7042.666s] [ext: omni.kit.window.extensions-1.4.11] startup
[7042.715s] [ext: omni.app.mini-0.1.1] startup
[7042.733s] app ready
嫩久啊
</span></code></pre></div></div> <h2 id="然后是isaac-lab">然后是Isaac Lab</h2> <p>说在前面：<a href="https://blog.csdn.net/qq_30545831/article/details/98944572">git 克隆第三方库 有的时候需要ssh key 权限 有的时候又不要 ，怎么回事呢</a> 公开库的克隆是可以不要权限的，但是你得找到长的像这样的地址：</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/CodeHubApp/CodeHub.git   //这种方法不需要ssh key权限
git clone git@github.com:CodeHubApp/CodeHub.git       //这种克隆方法，你需要把自己的key添加到别人的远程库里面
</code></pre></div></div> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/isaac-sim/IsaacLab.git
<span class="c"># 我在这里出现了git网络错误，但是过一会又好了，推测需要设置host，即修改etc/host文件</span>
<span class="c"># 可以试试http git clone http://github.com/isaac-sim/IsaacLab.git</span>

<span class="nb">sudo </span>apt <span class="nb">install </span>cmake build-essential
</code></pre></div></div> <p>然后安装RL框架，这里是可选的将安装所有学习框架</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>isaaclab
<span class="c"># 有可能会-bash: ./isaaclab.sh: Permission denied</span>
<span class="c"># chmod -R 777 isaaclab.sh # sudo chmod -R 777 isaaclab.sh</span>
<span class="c"># 全部框架</span>
./isaaclab.sh <span class="nt">--install</span> <span class="c"># or "./isaaclab.sh -i"</span>
<span class="c"># 只安装rl_games</span>
./isaaclab.sh <span class="nt">--install</span> rl_games
<span class="c"># 可选：rsl_rl  ​sb3  ​skrl  robomimic  none</span>

<span class="c"># 验证安装</span>
<span class="c"># Option 1: Using the isaaclab.sh executable</span>
<span class="c"># note: this works for both the bundled python and the virtual environment</span>
./isaaclab.sh <span class="nt">-p</span> <span class="nb">source</span>/standalone/tutorials/00_sim/create_empty.py
<span class="c"># Option 2: Using python in your virtual environment</span>
python <span class="nb">source</span>/standalone/tutorials/00_sim/create_empty.py

</code></pre></div></div> <h2 id="机械臂例程">机械臂例程</h2> <p>这里参考<a href="https://github.com/fan-ziqi/robot_lab">robot_lab</a></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 独立于 Isaac Lab 安装克隆存储库（即在目录外）IsaacLab</span>
git clone https://github.com/fan-ziqi/robot_lab.git
<span class="c"># 使用安装了 Isaac Lab 的 python 解释器，安装库</span>
python <span class="nt">-m</span> pip <span class="nb">install</span> <span class="nt">-e</span> ./exts/robot_lab
<span class="c"># 通过运行以下命令打印扩展中的所有可用环境，验证扩展是否已正确安装：</span>
python scripts/tools/list_envs.py
</code></pre></div></div> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python scripts/rsl_rl/base/train.py <span class="nt">--task</span> RobotLab-Isaac-Velocity-Flat-Unitree-G1-v0 <span class="nt">--headless</span> <span class="nt">--video</span> <span class="nt">--video_length</span> 100 <span class="nt">--video_interval</span> 500 <span class="nt">--num_envs</span> 32 <span class="nt">--max_iterations</span> 10000
python3 scripts/rsl_rl/train.py <span class="nt">--task</span> Template-Isaac-Reach-UR10-v0 <span class="nt">--num_envs</span> 4096 <span class="nt">--headless</span> <span class="nt">--video</span> <span class="nt">--video_length</span> 100 <span class="nt">--max_iterations</span> 10
</code></pre></div></div>]]></content><author><name></name></author><category term="Experience"/><category term="Robotic"/><category term="Issac"/><category term="RL"/><summary type="html"><![CDATA[记录我在服务器上安装issac sim与lab]]></summary></entry><entry><title type="html">【FunHPC服务器远程桌面】安装x11、桌面环境和vncserver</title><link href="https://son4ta.github.io/blog/2024/ubuntu-desktop/" rel="alternate" type="text/html" title="【FunHPC服务器远程桌面】安装x11、桌面环境和vncserver"/><published>2024-12-19T21:32:13+00:00</published><updated>2024-12-19T21:32:13+00:00</updated><id>https://son4ta.github.io/blog/2024/ubuntu-desktop</id><content type="html" xml:base="https://son4ta.github.io/blog/2024/ubuntu-desktop/"><![CDATA[<p>我叼，没桌面太难受了，怎么办？</p> <p><a href="https://www.funhpc.com/?msclkid=279b82507c861dc09fbee5678c99ce10#/documentation/Exampleflow/vncserver">具体教程，FunHPC官方文档</a></p> <h2 id="首先pip安装x11桌面环境和tightvncserver">首先，pip安装x11、桌面环境和tightvncserver</h2> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt-get upgrade
<span class="c"># 安装x11</span>
apt-get update <span class="o">&amp;&amp;</span> apt-get <span class="nb">install </span>xorg openbox <span class="nt">-y</span>
<span class="c"># 安装面环境</span>
apt-get update <span class="o">&amp;&amp;</span> apt-get <span class="nb">install </span>xfce4 xfce4-goodies <span class="nt">-y</span>
<span class="c"># 安装tightvncserver</span>
apt-get <span class="nb">install </span>tightvncserver <span class="nt">-y</span>
<span class="c"># vncserver 进程需要依赖用户环境变量 USER</span>
<span class="nb">export </span><span class="nv">USER</span><span class="o">=</span>root 
</code></pre></div></div> <h2 id="vnc配置">VNC配置</h2> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 当输入完之后继续在终端输入vncserver，用来配置密码</span>
vncserver
...配置密码

<span class="c"># 停止刚刚新建的虚拟化桌面 配置VNC Server</span>
vncserver <span class="nt">-kill</span> :1
</code></pre></div></div> <h2 id="配置vnc-server">配置VNC Server</h2> <p>修改xstartup文件</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim ~/.vnc/xstartup
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">i</code>编辑、 <code class="language-plaintext highlighter-rouge">esc</code>退出、 <code class="language-plaintext highlighter-rouge">:wq</code>保存</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 将下面的内容加入到xstartup文件的后面</span>
xrdb <span class="nv">$HOME</span>/.Xresources 
startxfce4 &amp;
</code></pre></div></div> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x ~/.vnc/xstartup
</code></pre></div></div> <p>启动新的虚拟化桌面</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vncserver <span class="nt">-geometry</span> 1280x960
</code></pre></div></div> <h2 id="配置本地计算机">配置<code class="language-plaintext highlighter-rouge">本地</code>计算机</h2> <p>请注意！是本地，即你的电脑，笨蛋</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-p</span> 端口号 <span class="nt">-NL</span> 5901:localhost:5901 网址
<span class="c"># eg</span>
ssh <span class="nt">-p</span> 41536 <span class="nt">-NL</span> 5901:localhost:5901 root@5fwng6ia9oqm2c1nsnow.deepln.com
</code></pre></div></div> <p>当你输入密码后，什么也不显示也没有发生报错，就表示已经完成本地端口转发。</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:<span class="se">\U</span>sers<span class="se">\x</span>xxx&gt;ssh <span class="nt">-p</span> 41536 <span class="nt">-NL</span> 5901:localhost:5901 root@5fwng6ia9oqm2c1nsnow.deepln.com
The authenticity of host <span class="s1">'[5fwng6ia9oqm2c1nsnow.deepln.com]:41536 ([111.6.167.250]:41536)'</span> can<span class="s1">'t be established.
ED25519 key fingerprint is SHA256:P9xKXT5+v0JHtUvyqT3E0zlAA1p0UbLn2J5c2tFsoN8.
This key is not known by any other names.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '</span><span class="o">[</span>5fwng6ia9oqm2c1nsnow.deepln.com]:41536<span class="s1">' (ED25519) to the list of known hosts.
root@5fwng6ia9oqm2c1nsnow.deepln.com'</span>s password:
Permission denied, please try again.
root@5fwng6ia9oqm2c1nsnow.deepln.com<span class="s1">'s password:（右键可以复制）
# 这里什么都没有，只有回车，就对了
</span></code></pre></div></div> <h2 id="本地安装vcn">本地安装VCN</h2> <p><a href="https://www.realvnc.com/en/connect/download/viewer">本地安装VCN Viewer</a> 打开VNC Viewer，输入VNC Viewer及用户名。</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#输入VNC Viewer及Name</span>
VNC Viewer:localhost:5901
Name:root
</code></pre></div></div> <p>输入密码，自此，完成了VNC可视化容器实例。</p>]]></content><author><name></name></author><category term="Experience"/><category term="Remote"/><category term="Desktop"/><category term="Ubuntu"/><summary type="html"><![CDATA[记录我在FunHPC服务器上安装远程桌面]]></summary></entry><entry><title type="html">记录我在怎么调查文献/综述</title><link href="https://son4ta.github.io/blog/2024/survey/" rel="alternate" type="text/html" title="记录我在怎么调查文献/综述"/><published>2024-11-28T17:32:13+00:00</published><updated>2024-11-28T17:32:13+00:00</updated><id>https://son4ta.github.io/blog/2024/survey</id><content type="html" xml:base="https://son4ta.github.io/blog/2024/survey/"><![CDATA[<p>现在假设，你跟写这篇文章3天前的我一样迷茫，累的嘴角流口水，你应该遵循什么样的标准流程去搜索文献呢？ 这里我们以我最近的方向为例，我现在需要调查<code class="language-plaintext highlighter-rouge">四足机器人</code>这个方向</p> <p>你当然可以、、</p> <h2 id="第一步确定关键词找到一个切入点">第一步——确定关键词找到一个切入点</h2> <p>我现在需要调查<code class="language-plaintext highlighter-rouge">四足机器人</code>，首先我要知道我如何搜索相关的文章， 配合使用<code class="language-plaintext highlighter-rouge">ChatGPT</code>、<code class="language-plaintext highlighter-rouge">腾讯元宝</code>、<code class="language-plaintext highlighter-rouge">有道</code>等工具</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1.Quadrupedal
2.Robots
3.quadruped
</code></pre></div></div> <p>然后用<code class="language-plaintext highlighter-rouge">谷歌学术</code>搜到一些看起来很吊的一篇文章</p> <h2 id="然后是ai工具">然后是AI工具</h2> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>]]></content><author><name></name></author><category term="Experience"/><category term="GPT"/><category term="Prompt"/><category term="LLM"/><summary type="html"><![CDATA[不是哥们，英雄联盟有survey和review这个英雄吗？]]></summary></entry><entry><title type="html">记录我在使用ChatGPT时，觉得效果好的提示词</title><link href="https://son4ta.github.io/blog/2024/prompt/" rel="alternate" type="text/html" title="记录我在使用ChatGPT时，觉得效果好的提示词"/><published>2024-11-28T14:32:13+00:00</published><updated>2024-11-28T14:32:13+00:00</updated><id>https://son4ta.github.io/blog/2024/prompt</id><content type="html" xml:base="https://son4ta.github.io/blog/2024/prompt/"><![CDATA[<p>先来一个<a href="https://markdown.com.cn/basic-syntax/htmls.html">md教程</a></p> <h2 id="提示词">提示词</h2> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Role:

Task:
Instruction：
Request:
Action:
Steps:
Requirements:

Context：
Example:
Input：

Output：

</code></pre></div></div> <h2 id="搜索文献">搜索文献</h2> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Role:

你是一名多模态翻译研究的资深专家，专注于该领域的前沿发展与研究进展。

Task:

请通过联网功能，提供5篇关于“多模态话语分析理论在翻译研究中的应用情况”的代表性权威文献。我们希望通过这些文献了解当前多模态话语分析理论在翻译研究中的应用情况。

Requirements:

（1）数据来源：

   ◦ 请从主流、权威的学术数据库或期刊网站上选择文章。

   ◦ 文章需来自同行评审的期刊或会议论文集。

注意:不要凭空捏造文献

（2）文献选择标准：

   ◦ 高引用率：优先选择引用次数较高的文献，以确保文章的影响力和可信度。

   ◦ 代表性作者：尽量选择由领域内知名学者、理论创始人或有重要贡献的作者撰写的文章。

   ◦ 研究进展：确保文献能够反映多模态翻译研究领域的最新进展或关键理论。

Output：

   ◦ 每篇文献应包含以下信息：

       ▪ 文章摘要。

       ▪ 文章来源链接，以便查阅全文。
</code></pre></div></div> <p>重复上述操作，获取更多文献······</p> <h2 id="分析综述文献todo能不能不上传附件">分析、综述文献（TODO：能不能不上传附件，）</h2> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Task:

请你帮助我总结并分析附件中9篇文章的内容，并撰写文献综述，重点聚焦于多模态话语分析理论与翻译研究。

Request:

（1）文章内容总结与分类:

对每篇文章的核心内容进行简明扼要的总结。

根据文章的主题，将9篇文章的内容进行分类，分类数量不超过3个。避免分类的交叉和重复。

每个分类下请注明文章的来源信息（包括作者及年份）。


（2）文献综述撰写:

基于分类撰写一个逻辑连贯的文献综述段落，重点关注多模态话语分析理论与翻译研究。

文献综述应包括以下内容：

国外对多模态话语分析理论的研究现状，分类情况及各分类的主要内容。

多模态话语分析理论在翻译研究中的应用。

当前研究中可能存在的不足或空白。

Action:

（1）对9篇文章进行内容总结与分类。

（2）根据分类及文章内容撰写文献综述，结合“多模态话语分析理论与翻译研究”的主题。

Context:

这9篇文章将以附件形式提供给你，你仅需基于文章本身的内容进行总结与分析，不进行超出范围的拓展分析。重点放在国外学者对多模态话语分析理论的研究以及其在翻译研究中的应用。

Example:

文献综述分为两段：

第一段为：国外关于多模态话语分析理论的研究可以分为X种情况，包括（分类1、分类2等）。在每个分类中，国外学者主要关注了A、B、C等内容。例如，某某学者（年份）提出了……。整体来看，国外学者普遍将多模态话语分析理论应用于如下几类翻译研究：文本翻译、视听翻译、跨文化翻译等。

第二段为：然而，现有研究中仍然存在一些空白，主要表现在……。


</code></pre></div></div> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ubuntu:/etc/docker<span class="nv">$ </span><span class="nb">sudo rm </span>daemon.json 
</code></pre></div></div>]]></content><author><name></name></author><category term="Experience"/><category term="GPT"/><category term="Prompt"/><category term="LLM"/><summary type="html"><![CDATA[使用ChatGPT-4o，这是一个实验性的文档，因为之前我其实一直不喜欢这种“提示词工程”，可能真香了hh]]></summary></entry><entry><title type="html">Ubuntu下Docker安装（显卡机，无sudo权限）</title><link href="https://son4ta.github.io/blog/2024/2/" rel="alternate" type="text/html" title="Ubuntu下Docker安装（显卡机，无sudo权限）"/><published>2024-11-18T14:32:13+00:00</published><updated>2024-11-18T14:32:13+00:00</updated><id>https://son4ta.github.io/blog/2024/2</id><content type="html" xml:base="https://son4ta.github.io/blog/2024/2/"><![CDATA[<p>卸载原来的docker</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get remove docker docker-engine docker.io containerd runc
</code></pre></div></div> <p>安装依赖</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release
</code></pre></div></div> <p>添加 Docker 官方 GPG key</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#官方，挑战网络，做回自己（可能国内现在访问会存在问题）</span>
curl <span class="nt">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg | gpg <span class="nt">--dearmor</span> <span class="nt">-o</span> /usr/share/keyrings/docker-archive-keyring.gpg
<span class="c">#阿里</span>
curl <span class="nt">-fsSL</span> https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | gpg <span class="nt">--dearmor</span> <span class="nt">-o</span> /usr/share/keyrings/docker-archive-keyring.gpg
</code></pre></div></div> <p>更新源</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#Docker官方源</span>
<span class="nb">echo</span> <span class="s2">"deb [arch=</span><span class="si">$(</span>dpkg <span class="nt">--print-architecture</span><span class="si">)</span><span class="s2"> signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu </span><span class="si">$(</span>lsb_release <span class="nt">-cs</span><span class="si">)</span><span class="s2"> stable"</span> | <span class="nb">tee</span> /etc/apt/sources.list.d/docker.list <span class="o">&gt;</span> /dev/null

<span class="c">#阿里apt源</span>
<span class="nb">echo</span> <span class="s2">"deb [arch=</span><span class="si">$(</span>dpkg <span class="nt">--print-architecture</span><span class="si">)</span><span class="s2"> signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/docker-ce/linux/ubuntu </span><span class="si">$(</span>lsb_release <span class="nt">-cs</span><span class="si">)</span><span class="s2"> stable"</span> | <span class="nb">tee</span> /etc/apt/sources.list.d/docker.list <span class="o">&gt;</span> /dev/null

<span class="c">#更新源</span>
apt update
apt-get update
</code></pre></div></div> <p>安装docker</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#安装最新版本的Docker</span>
apt <span class="nb">install </span>docker-ce docker-ce-cli containerd.io
<span class="c">#等待安装完成</span>

<span class="c">#查看Docker版本</span>
docker version

<span class="c">#启动服务</span>
systemctl start docker

<span class="c">#查看Docker运行状态</span>
systemctl status docker
</code></pre></div></div> <p>安装补全工具</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get <span class="nb">install </span>bash-completion

curl <span class="nt">-L</span> https://raw.githubusercontent.com/docker/docker-ce/master/components/cli/contrib/completion/bash/docker <span class="nt">-o</span> /etc/bash_completion.d/docker.sh

<span class="nb">source</span> /etc/bash_completion.d/docker.sh
</code></pre></div></div>]]></content><author><name></name></author><category term="Experience"/><category term="Debug"/><category term="Deploy"/><summary type="html"><![CDATA[Ubuntu下Docker安装]]></summary></entry><entry><title type="html">DreamWaQ在Ubuntu服务器上的安装部署与Debug（legged_gym安装）</title><link href="https://son4ta.github.io/blog/2024/3/" rel="alternate" type="text/html" title="DreamWaQ在Ubuntu服务器上的安装部署与Debug（legged_gym安装）"/><published>2024-11-18T14:32:13+00:00</published><updated>2024-11-18T14:32:13+00:00</updated><id>https://son4ta.github.io/blog/2024/3</id><content type="html" xml:base="https://son4ta.github.io/blog/2024/3/"><![CDATA[<p>在复现这个代码： <a href="https://github.com/Manaro-Alpha/DreamWaQ">DreamWaQ</a> 注意要求：python</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ERROR: Package <span class="s1">'isaacgym'</span> requires a different Python: 3.10.14 not <span class="k">in</span> <span class="s1">'&lt;3.9,&gt;=3.6'</span>

conda create <span class="nt">-n</span> isaacgym <span class="nv">python</span><span class="o">=</span>3.8
conda activate isaacgym

<span class="c"># 查看虚拟环境列表</span>
<span class="c"># conda env list</span>
<span class="c"># 退出当前环境到base环境</span>
<span class="c"># conda deactivate    </span>
<span class="c"># 清除user_env环境      </span>
<span class="c"># conda remove -n user_env --all  </span>
</code></pre></div></div> <p>先去下载安装包<a href="https://developer.nvidia.com/isaac-gym">安装包</a></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#解压</span>
<span class="nb">tar</span> <span class="nt">-xzvf</span> IsaacGym_Preview_4_Package.tar.gz
</code></pre></div></div> <p>关键！安装isaacgym</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 这里会安装torch</span>
pip <span class="nb">install</span> <span class="nt">-e</span> ./isaacgym/python/
</code></pre></div></div> <p>再运行</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/Manaro-Alpha/DreamWaQ.git
<span class="nb">cd </span>DreamWaQ
pip <span class="nb">install</span> <span class="nt">-e</span> ./rsl_rl-1.0.2
pip <span class="nb">install</span> <span class="nt">-e</span> ./legged_gym
</code></pre></div></div> <p>完美解决</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Installing collected packages: legged_gym
  Running setup.py develop <span class="k">for </span>legged_gym
Successfully installed legged_gym-1.0.0
</code></pre></div></div> <p>ps:tensorboard要安装，Numpy版本也要调整</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>tensorboard
pip uninstall numpy <span class="c">#不必要</span>
pip <span class="nb">install </span><span class="nv">numpy</span><span class="o">==</span>1.23.5
</code></pre></div></div> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Installing collected packages: numpy
  Attempting uninstall: numpy
    Found existing installation: numpy 1.24.4
    Uninstalling numpy-1.24.4:
      Successfully uninstalled numpy-1.24.4
Successfully installed numpy-1.23.5
</code></pre></div></div> <p>最后？</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 ./legged_gym/legged_gym/scripts/train.py <span class="nt">--task</span><span class="o">=</span>go1
</code></pre></div></div> <p>我就知道，又报错了！</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>torch<span class="o">)</span> root@wcivithvtopwwwpm-snow-f994bb78f-6f6wd:/data/coding/DreamWaQ# python3 ./legged_gym/legged_gym/scripts/train.py <span class="nt">--task</span><span class="o">=</span>go1
Importing module <span class="s1">'gym_38'</span> <span class="o">(</span>/data/coding/DreamWaQ/isaacgym/python/isaacgym/_bindings/linux-x86_64/gym_38.so<span class="o">)</span>
Setting GYM_USD_PLUG_INFO_PATH to /data/coding/DreamWaQ/isaacgym/python/isaacgym/_bindings/linux-x86_64/usd/plugInfo.json
PyTorch version 1.11.0+cu113
Device count 1
/data/coding/DreamWaQ/isaacgym/python/isaacgym/_bindings/src/gymtorch
Using /data/.rootcache/torch_extensions/py38_cu113 as PyTorch extensions root...
Emitting ninja build file /data/.rootcache/torch_extensions/py38_cu113/gymtorch/build.ninja...
Building extension module gymtorch...
Allowing ninja to <span class="nb">set </span>a default number of workers... <span class="o">(</span>overridable by setting the environment variable <span class="nv">MAX_JOBS</span><span class="o">=</span>N<span class="o">)</span>
ninja: no work to <span class="k">do</span><span class="nb">.</span>
Loading extension module gymtorch...
Setting seed: 5
Not connected to PVD
+++ Using GPU PhysX
Physics Engine: PhysX
Physics Device: cuda:0
GPU Pipeline: enabled
Segmentation fault <span class="o">(</span>core dumped<span class="o">)</span>
</code></pre></div></div> <p>怎么办？只有杀！</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#只有杀！--headless</span>
python3 ./legged_gym/legged_gym/scripts/train.py <span class="nt">--task</span><span class="o">=</span>go1 <span class="nt">--headless</span>
</code></pre></div></div> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">################################################################################</span>
                       Learning iteration 90/3000                       

                       Computation: 18159 steps/s <span class="o">(</span>collection: 4.440s, learning 0.973s<span class="o">)</span>
               Value <span class="k">function </span>loss: 0.0032
                    Surrogate loss: <span class="nt">-0</span>.0007
             Autoenc <span class="k">function </span>loss: 5.9655
             Mean action noise std: 0.56
                       Mean reward: 3.77
               Mean episode length: 507.48
      Mean episode rew_action_rate: <span class="nt">-0</span>.0363
       Mean episode rew_ang_vel_xy: <span class="nt">-0</span>.0621
      Mean episode rew_base_height: <span class="nt">-0</span>.0049
          Mean episode rew_dof_acc: <span class="nt">-0</span>.0483
    Mean episode rew_feet_air_time: <span class="nt">-0</span>.0017
      Mean episode rew_joint_power: <span class="nt">-0</span>.0007
        Mean episode rew_lin_vel_z: <span class="nt">-0</span>.0197
      Mean episode rew_orientation: <span class="nt">-0</span>.0623
Mean episode rew_power_distribution: <span class="nt">-0</span>.0003
       Mean episode rew_smoothness: <span class="nt">-0</span>.0062
 Mean episode rew_tracking_ang_vel: 0.1954
 Mean episode rew_tracking_lin_vel: 0.2059
        Mean episode terrain_level: 0.2157
<span class="nt">--------------------------------------------------------------------------------</span>
                   Total timesteps: 8945664
                    Iteration <span class="nb">time</span>: 5.41s
                        Total <span class="nb">time</span>: 429.71s
                               ETA: 13741.3s
</code></pre></div></div> <p>TODO:如果你有崭新的显卡！请尝试重新安装驱动！<a href="https://blog.csdn.net/ggggfff1/article/details/135487322">参考</a></p>]]></content><author><name></name></author><category term="Experience"/><category term="Debug"/><category term="Deploy"/><summary type="html"><![CDATA[Ubuntu下Isaac Gym安装教程，艾西古，最喜欢的一集嗷，debug爽！Tesla P4，老爷机就是牛！]]></summary></entry><entry><title type="html">WSL下配置DreamWqa环境</title><link href="https://son4ta.github.io/blog/2024/1/" rel="alternate" type="text/html" title="WSL下配置DreamWqa环境"/><published>2024-10-10T14:32:13+00:00</published><updated>2024-10-10T14:32:13+00:00</updated><id>https://son4ta.github.io/blog/2024/1</id><content type="html" xml:base="https://son4ta.github.io/blog/2024/1/"><![CDATA[<p>Job for docker.service failed because the control process exited with error code. 最后发现是之前用vim创建了个daemon.json</p> <p><a href="https://blog.csdn.net/zwlww1/article/details/129624289#:~:text=提示：Job">解决docker启动报错：Job for docker.service failed because the control process exited with error code-CSDN博客</a></p> <p>解决：</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ubuntu:/etc/docker<span class="nv">$ </span><span class="nb">sudo rm </span>daemon.json 
</code></pre></div></div> <p>启动docker</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> systemctl start docker
</code></pre></div></div> <p>因为正常执行build大概率会因为网络问题翻车</p> <pre>[+] Building 0.3s (3/3) FINISHED                                                                
<font color="#3465A4"> =&gt; [internal] load .dockerignore                                                          0.0s</font>
<font color="#3465A4"> =&gt; =&gt; transferring context: 2B                                                            0.0s</font>
<font color="#3465A4"> =&gt; [internal] load build definition from Dockerfile                                       0.0s</font>
<font color="#3465A4"> =&gt; =&gt; transferring dockerfile: 2.33kB                                                     0.0s</font>
<font color="#CC0000"> =&gt; ERROR [internal] load metadata for nvcr.io/nvidia/pytorch:21.09-py3                    0.3s</font>
------
 &gt; [internal] load metadata for nvcr.io/nvidia/pytorch:21.09-py3:
------
Dockerfile:1
--------------------
   1 | &gt;&gt;&gt; FROM nvcr.io/nvidia/pytorch:21.09-py3
   2 |     
   3 |     # set WORKDIR
--------------------
ERROR: failed to solve: nvcr.io/nvidia/pytorch:21.09-py3: failed to do request: Head &quot;https://nvcr.io/v2/nvidia/pytorch/manifests/21.09-py3&quot;: read tcp 192.168.0.103:44150-&gt;54.148.129.60:443: read: connection reset by peer</pre> <p>所以先安装</p> <p>[ERROR <a href="https://github.com/ifzhang/ByteTrack/issues/189">internal] load metadata for nvcr.io/nvidia/tensorrt:21.09-py3 · Issue #189 · ifzhang/ByteTrack (github.com)</a></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull nvcr.io/nvidia/pytorch:21.09-py3 -–registry-mirror<span class="o">=</span>https://mirror.iscas.ac.cn<span class="o">(</span>国内镜像源地址<span class="o">)</span>
</code></pre></div></div> <p>启动docker</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> vi  /etc/docker/daemon.json
</code></pre></div></div> <p>重启docker</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>service docker restart
</code></pre></div></div> <p>查看docker信息</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker info
</code></pre></div></div> <p>清理docker builder</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker builder prune
</code></pre></div></div> <p>build</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">--network</span> host <span class="nt">-t</span> rl_docker-main <span class="nt">-f</span> S:/Programming/rl_docker-main/Dockerfile S:/Programming/rl_docker-main
</code></pre></div></div> <p><img src="image-20241004013549568.png" alt="image-20241004013549568"/></p> <p>出现这个错误是因为在构建 Docker 镜像时，网络连接到 <code class="language-plaintext highlighter-rouge">http://archive.ubuntu.com/ubuntu</code> 失败，但是不应该啊？</p> <p>记事本打开 <code class="language-plaintext highlighter-rouge">Dockerfile</code> ，发现命令：</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># replace mirror</span>
RUN apt-get <span class="nb">install</span> <span class="nt">-q</span> <span class="nt">-y</span> <span class="nt">--no-install-recommends</span> wget <span class="se">\</span>
<span class="o">&amp;&amp;</span> wget http://archive.ubuntu.com/ubuntu/pool/main/c/ca-certificates/ca-certificates_20230311ubuntu0.20.04.1_all.deb <span class="se">\</span>
...
</code></pre></div></div> <p>于是我直接去网站上查，压根没看到<code class="language-plaintext highlighter-rouge">ca-certificates_20230311ubuntu0.20.04.1_all.deb</code>这个文件，已经过时被删除了</p> <p>官网：<a href="http://archive.ubuntu.com/ubuntu/pool/main/c/ca-certificates/">Index of /ubuntu/pool/main/c/ca-certificates</a></p> <p>阿里云：<a href="http://mirrors.aliyun.com/ubuntu/pool/main/c/ca-certificates/?spm=a2c6h.25603864.0.0.644e1431A2R1g6">ubuntu-pool-main-c-ca-certificates安装包下载_开源镜像站-阿里云 (aliyun.com)</a></p> <p>替换为<code class="language-plaintext highlighter-rouge">ca-certificates_20240203~20.04.1_all.deb</code>版本后解决：</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
<span class="o">&amp;&amp;</span> wget http://mirrors.aliyun.com/ubuntu/pool/main/c/ca-certificates/ca-certificates_20240203~20.04.1_all.deb <span class="se">\</span>
<span class="o">&amp;&amp;</span> dpkg <span class="nt">-i</span> ./ca-certificates_20240203~20.04.1_all.deb
...
</code></pre></div></div> <p>完美解决</p> <p><img src="image-20241004184052786.png" alt="image-20241004184052786"/></p> <p>GPU不可用？</p> <pre><code class="language-apl">WARNING: The NVIDIA Driver was not detected.  GPU functionality will not be available.
</code></pre> <p>build</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">--network</span> host <span class="nt">-t</span> rl_docker-main <span class="nt">-f</span> S:/Programming/rl_docker-main/Dockerfile S:/Programming/rl_docker-main
</code></pre></div></div> <p>运行DreamWaQ</p> <p><a href="https://blog.csdn.net/eye123456789/article/details/120879982#:~:text=为了在Win">docker的安装以及跑本地项目代码步骤说明_docker怎么运行本地代码-CSDN博客</a></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-itd</span>
</code></pre></div></div> <p>WSL安装</p> <p><a href="https://blog.csdn.net/weixin_45840825/article/details/127138564">win11 安装 WSL2 在非 C 盘及配置（图形界面+代理）_wsl不安装在c盘 csdn-CSDN博客</a></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div> <p>docker run ，用docker命令运行run.sh（bash好难搞，曲线救国）</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-it</span> <span class="nt">--rm</span> <span class="nt">-v</span> S:<span class="se">\P</span>rogramming<span class="se">\r</span>l_docker-main:/home/root/rl_ws <span class="nt">--gpus</span><span class="o">=</span>all <span class="nt">--name</span><span class="o">=</span>rl rl_docker-main bash /home/root/rl_ws/setup.sh
</code></pre></div></div> <p>setup.sh里的pip失败</p> <p><img src="image-20241005012110467.png" alt="image-20241005012110467"/></p> <p>注释掉setup.sh里面不存在的文件就行，其实不是不存在，是要下载</p> <p><a href="https://blog.csdn.net/m0_37802038/article/details/134629194">20231126-超详细Isaac Gym安装教程（基于双系统版本）-CSDN博客</a></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
pip <span class="nb">install</span> <span class="nt">-e</span> ./isaacgym/python
pip <span class="nb">install</span> <span class="nt">-e</span> ./rsl_rl
pip <span class="nb">install</span> <span class="nt">-e</span> ./legged_gym

<span class="c"># 安装gym</span>
pip <span class="nb">install</span> <span class="nt">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple gym

<span class="c"># 执行 Python 脚本</span>
python /home/root/rl_ws/run_dreamwaq.py <span class="nt">--headless</span>
...
</code></pre></div></div> <p>最终结果</p> <p><img src="image-20241005021400892.png" alt="image-20241005021400892"/></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">--network</span> host <span class="nt">-t</span> rl_docker-main <span class="nt">-f</span> S:/Programming/rl_docker-main/Dockerfile S:/Programming/rl_docker-main
</code></pre></div></div> <p>build</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">--network</span> host <span class="nt">-t</span> rl_docker-main <span class="nt">-f</span> S:/Programming/rl_docker-main/Dockerfile S:/Programming/rl_docker-main
</code></pre></div></div> <p>build</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">--network</span> host <span class="nt">-t</span> rl_docker-main <span class="nt">-f</span> S:/Programming/rl_docker-main/Dockerfile S:/Programming/rl_docker-main
</code></pre></div></div> <p>build</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">--network</span> host <span class="nt">-t</span> rl_docker-main <span class="nt">-f</span> S:/Programming/rl_docker-main/Dockerfile S:/Programming/rl_docker-main
</code></pre></div></div> <p>build</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">--network</span> host <span class="nt">-t</span> rl_docker-main <span class="nt">-f</span> S:/Programming/rl_docker-main/Dockerfile S:/Programming/rl_docker-main
</code></pre></div></div> <p>build</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">--network</span> host <span class="nt">-t</span> rl_docker-main <span class="nt">-f</span> S:/Programming/rl_docker-main/Dockerfile S:/Programming/rl_docker-main
</code></pre></div></div>]]></content><author><name></name></author><category term="Experience"/><category term="Debug"/><category term="Deploy"/><summary type="html"><![CDATA[WSL下配置DreamWqa环境]]></summary></entry></feed>