<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="cn"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://son4ta.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://son4ta.github.io/" rel="alternate" type="text/html" hreflang="cn"/><updated>2025-06-22T09:47:14+00:00</updated><id>https://son4ta.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Ai2THOR-ProcTHOR</title><link href="https://son4ta.github.io/blog/2025/RoboTHOR/" rel="alternate" type="text/html" title="Ai2THOR-ProcTHOR"/><published>2025-05-30T14:32:13+00:00</published><updated>2025-05-30T14:32:13+00:00</updated><id>https://son4ta.github.io/blog/2025/RoboTHOR</id><content type="html" xml:base="https://son4ta.github.io/blog/2025/RoboTHOR/"><![CDATA[<h1 id="ai2thor-procthor">Ai2THOR-ProcTHOR</h1> <p>ProcTHOR 使用程序生成对大规模多样化、逼真、交互式、可定制和高性能的 3D 环境进行采样，以训练模拟的体现代理。以下是对虚拟家庭环境进行采样的示例。</p> <p><img src="S:\Programming\Son4ta.github.io\Son4ta.github.io\assets\img\0-acff405a245e23a2a6259dc276288715.svg" alt="img"/></p> <p><a href="https://procthor.allenai.org/">ProcTHOR 的 (allenai.org)</a></p> <h2 id="环境配置">环境配置</h2> <h3 id="一安装">一、安装</h3> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>ai2thor
<span class="c"># or</span>
conda <span class="nb">install</span> <span class="nt">-c</span> conda-forge ai2thor
</code></pre></div></div> <h3 id="二habitat-sim-023----habitat-lab">二、Habitat-sim-0.2.3 &amp; Habitat-lab</h3> <p>请注意，这里的Python一定要是<code class="language-plaintext highlighter-rouge">==3.8</code></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda <span class="nb">install </span>habitat-sim<span class="o">==</span>0.2.3 <span class="nt">-c</span> conda-forge <span class="nt">-c</span> aihabitat
pip <span class="nb">install</span> <span class="nt">-e</span> third_party/habitat-lab
</code></pre></div></div> <h3 id="三安装第三方包">三、安装第三方包</h3> <h4 id="1-lightglue-githubcomcvglightgluegit">1. <strong>LightGlue</strong> (<code class="language-plaintext highlighter-rouge">github.com/cvg/LightGlue.git</code>)</h4> <p>功能：一种基于深度学习的局部特征匹配算法，专为稀疏特征匹配设计。它通过自适应计算机制动态调整推理深度和特征点数量，显著提升了匹配效率和精度</p> <ul> <li>支持自省机制，可提前终止简单图像对的推理过程</li> <li>在3D重建、SLAM等对实时性要求高的场景中表现优异</li> </ul> <h4 id="2-detectron2-githubcomfacebookresearchdetectron2git">2. <strong>Detectron2</strong> (<code class="language-plaintext highlighter-rouge">github.com/facebookresearch/detectron2.git</code>)</h4> <p>功能：Meta开源的计算机视觉工具库，支持目标检测、实例分割、关键点检测等任务</p> <ul> <li>提供预训练模型如Faster R-CNN、Mask R-CNN等</li> <li>支持灵活的配置系统和分布式训练</li> </ul> <h4 id="3-grounded-segment-anything-idea-researchgrounded-segment-anything">3. <strong>Grounded-Segment-Anything</strong> (<code class="language-plaintext highlighter-rouge">IDEA-Research/Grounded-Segment-Anything</code>)</h4> <p>核心组件:</p> <ul> <li> <p><strong>Segment Anything (SAM)</strong></p> <p>功能：Meta提出的通用图像分割模型，支持零样本分割（无需预训练即可分割任意物体）</p> <p>模型文件：<code class="language-plaintext highlighter-rouge">sam_vit_h_4b8939.pth</code></p> <p>是其预训练权重，适用于高精度分割任务</p> </li> <li> <p><strong>GroundingDINO</strong></p> <p>功能：基于文本提示的零样本目标检测模型，可将自然语言描述与图像中的物体关联</p> <ul> <li><strong>模型文件</strong>：<code class="language-plaintext highlighter-rouge">groundingdino_swint_ogc.pth</code>是其预训练权重，支持如“检测戴帽子的人”等复杂语义查询</li> </ul> </li> </ul> <h4 id="4-依赖项与模型文件">4. <strong>依赖项与模型文件</strong></h4> <p><code class="language-plaintext highlighter-rouge">segment_anything</code>：SAM的PyTorch实现，提供图像分割基础功能</p> <p><code class="language-plaintext highlighter-rouge">GroundingDINO依赖</code>：包含文本-图像特征融合模块，支持多模态目标检测</p> <p>模型文件用途：</p> <ul> <li><code class="language-plaintext highlighter-rouge">sam_vit_h_4b8939.pth</code>：SAM的ViT-Huge模型权重，适合高精度分割。</li> <li><code class="language-plaintext highlighter-rouge">groundingdino_swint_ogc.pth</code>：GroundingDINO的Swin Transformer权重，支持文本引导检测。</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>git+https://github.com/cvg/LightGlue.git
pip <span class="nb">install </span>git+https://github.com/facebookresearch/detectron2.git <span class="c"># 请保证有足够的运行内存编译</span>
git clone https://github.com/IDEA-Research/Grounded-Segment-Anything.git third_party/Grounded-Segment-Anything
<span class="nb">cd </span>third_party/Grounded-Segment-Anything
git checkout 5cb813f <span class="c"># 会得到一个警告：分离头指针状态，不用理会</span>
pip <span class="nb">install</span> <span class="nt">-e</span> segment_anything
pip <span class="nb">install</span> <span class="nt">--no-build-isolation</span> <span class="nt">-e</span> GroundingDINO
<span class="nb">cd</span> ../../
<span class="nb">mkdir</span> <span class="nt">-p</span> data/models/  <span class="c"># -p 参数自动创建多级目录，这里原作者没搞，wget -O 参数指定的是完整文件路径，不会自动创建目录</span>
wget <span class="nt">-O</span> data/models/sam_vit_h_4b8939.pth https://dl.fbaipublicfiles.com/segment_anything/sam_vit_h_4b8939.pth
<span class="c"># data/models/sam_vit_h_4b 100%[=================================&gt;]   2.39G  13.5MB/s    in 3m 9s</span>

<span class="c"># source /etc/network_turbo 这里需要VPN ↓</span>
wget <span class="nt">-O</span> data/models/groundingdino_swint_ogc.pth https://github.com/IDEA-Research/GroundingDINO/releases/download/v0.1.0-alpha/groundingdino_swint_ogc.pth
<span class="c"># data/models/groundingdin 100%[=================================&gt;] 661.85M   121MB/s    in 5.5s</span>
</code></pre></div></div> <h3 id="四安装别的小东西">四、安装别的小东西</h3> <p><code class="language-plaintext highlighter-rouge">pytorch::faiss-gpu</code> 是 Meta AI 开发的 <strong>GPU 加速版 Faiss 库</strong>，专为大规模向量相似性搜索和聚类设计，可能和图搜索有关系</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda <span class="nb">install </span>pytorch::faiss-gpu
pip <span class="nb">install</span> <span class="nt">-r</span> requirements.txt
</code></pre></div></div> <p>至此，环境配置完成。</p> <h2 id="数据集hm3d">数据集（HM3D）</h2> <h3 id="数据集下载">数据集下载</h3> <p>为了数据集组织正确，先创建文件夹：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir -p data/datasets/instance_imagenav/hm3d/v3/
mkdir -p data/scene_datasets/hm3d_v0.2/val/
</code></pre></div></div> <p>然后，下载两个压缩包：</p> <p>https://dl.fbaipublicfiles.com/habitat/data/datasets/imagenav/hm3d/v3/instance_imagenav_hm3d_v3.zip</p> <p>https://mp-app-prod.s3.amazonaws.com/habitat/v1.0/hm3d-val-habitat-v0.2.tar</p> <p>最后，对于<code class="language-plaintext highlighter-rouge">instance_imagenav_hm3d_v3.zip</code>，把<code class="language-plaintext highlighter-rouge">val</code>、<code class="language-plaintext highlighter-rouge">train</code>和<code class="language-plaintext highlighter-rouge">val_mini</code>复制到<code class="language-plaintext highlighter-rouge">data/datasets/instance_imagenav/hm3d/v3/</code>下面</p> <p>对于<code class="language-plaintext highlighter-rouge">hm3d-val-habitat-v0.2.tar</code>，一样操作</p> <p>注意，需要这么组织数据集，名字也要一模一样：</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>UniGoal/
└── data/
    ├── datasets/
    │   └── instance_imagenav/
    │       └── hm3d/
    │           └── v3/
    │               └── val/
    │                   ├── content/
    │                   │   ├── 4ok3usBNeis.json.gz
    │                   │   ├── 5cdEh9F2hJL.json.gz
    │                   │   ├── ...
    │                   │   └── zt1RVoi7PcG.json.gz
    │                   └── val.json.gz
    └── scene_datasets/
        └── hm3d_v0.2/
            └── val/
                ├── 00800-TEEsavR23oF/
                │   ├── TEEsavR23oF.basis.glb
                │   └── TEEsavR23oF.basis.navmesh
                ├── 00801-HaxA7YrQdEC/
                ├── ...
                └── 00899-58NLZxWBSpk/
</code></pre></div></div> <h2 id="llm-and-vlm"><strong>LLM and VLM</strong></h2> <p>Option 1: Install Ollama.【我们这里使用这个选项】</p> <p><a href="https://ollama.readthedocs.io/linux/#ollama">Linux 文档 - Ollama 中文文档</a></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># source /etc/network_turbo</span>
curl <span class="nt">-fsSL</span> https://ollama.com/install.sh | sh

<span class="c"># 如果你没有GPU的情况下，ollama会自行关闭，需要重新启动</span>
ollama serve &amp;

ollama pull llama3.2-vision
<span class="c"># ollama支持中断继续下载，放心Kill</span>
<span class="nb">export </span><span class="nv">HF_ENDPOINT</span><span class="o">=</span>https://hf-mirror.com
</code></pre></div></div> <p><img src="S:\Programming\Son4ta.github.io\Son4ta.github.io\assets\img\image-20250425170952781.png" alt="image-20250425170952781"/></p> <p>Option 2: Use LLM and VLM via your own API. Change the <code class="language-plaintext highlighter-rouge">llm_model</code>, <code class="language-plaintext highlighter-rouge">vlm_model</code>, <code class="language-plaintext highlighter-rouge">api_key</code>, <code class="language-plaintext highlighter-rouge">base_url</code> in the configuration file <code class="language-plaintext highlighter-rouge">configs/config_habitat.yaml</code> to your own.</p> <h2 id="evaluation">Evaluation</h2> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ollama serve &amp; <span class="c"># 如果没启动</span>
<span class="nb">nohup </span>ollama serve &amp; <span class="c"># 这会启动Ollama后台服务。保持此终端运行或使用nohup将其置于后台</span>
netstat <span class="nt">-tuln</span> | <span class="nb">grep </span>11434 <span class="c"># 运行以下命令查看11434端口是否被监听</span>

<span class="nv">CUDA_VISIBLE_DEVICES</span><span class="o">=</span>0 python main.py  <span class="c"># instance-image-goal</span>
</code></pre></div></div> <h2 id="debug">DeBug</h2> <p>报错<code class="language-plaintext highlighter-rouge">ImportError: libEGL.so.1: cannot open shared object file: No such file or directory</code></p> <p>觉得眼熟？ImportError正在全世界发生！</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    import habitat_sim
  File <span class="s2">"/root/miniconda3/envs/unigoal/lib/python3.8/site-packages/habitat_sim-0.2.3-py3.8-linux-x86_64.egg/habitat_sim/__init__.py"</span>, line 13, <span class="k">in</span> &lt;module&gt;
    import habitat_sim._ext.habitat_sim_bindings
ImportError: libEGL.so.1: cannot open shared object file: No such file or directory
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install </span>libegl1 mesa-utils libgl1-mesa-glx
</code></pre></div></div> <p>报错<code class="language-plaintext highlighter-rouge">ModuleNotFoundError: No module named 'openai'</code></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
  File <span class="s2">"main.py"</span>, line 15, <span class="k">in</span> &lt;module&gt;
    from src.graph.graph import Graph
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/graph.py"</span>, line 9, <span class="k">in</span> &lt;module&gt;
    from openai import OpenAI
ModuleNotFoundError: No module named <span class="s1">'openai'</span>
</code></pre></div></div> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>openai
</code></pre></div></div> <p>报错<code class="language-plaintext highlighter-rouge">ImportError: libmkl_intel_lp64.so.1: cannot open shared object file: No such file or directory</code></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
  File <span class="s2">"main.py"</span>, line 15, <span class="k">in</span> &lt;module&gt;
    from src.graph.graph import Graph
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/graph.py"</span>, line 28, <span class="k">in</span> &lt;module&gt;
    from .utils.utils import filter_objects, gobs_to_detection_list
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/utils/utils.py"</span>, line 7, <span class="k">in</span> &lt;module&gt;
    import faiss
  File <span class="s2">"/root/miniconda3/envs/unigoal/lib/python3.8/site-packages/faiss/__init__.py"</span>, line 16, <span class="k">in</span> &lt;module&gt;
    from .loader import <span class="k">*</span>
  File <span class="s2">"/root/miniconda3/envs/unigoal/lib/python3.8/site-packages/faiss/loader.py"</span>, line 65, <span class="k">in</span> &lt;module&gt;
    from .swigfaiss import <span class="k">*</span>
  File <span class="s2">"/root/miniconda3/envs/unigoal/lib/python3.8/site-packages/faiss/swigfaiss.py"</span>, line 13, <span class="k">in</span> &lt;module&gt;
    from <span class="nb">.</span> import _swigfaiss
ImportError: libmkl_intel_lp64.so.1: cannot open shared object file: No such file or directory
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda <span class="nb">install </span><span class="nv">mkl</span><span class="o">=</span>2021 
</code></pre></div></div> <p>报错<code class="language-plaintext highlighter-rouge">ImportError: libmkl_intel_lp64.so.1: cannot open shared object file: No such file or directory</code></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>num timesteps 0, episode_idx 0
update_observation 6...
    mapping3d...
        compute_spatial_similarities...
Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
  File <span class="s2">"main.py"</span>, line 259, <span class="k">in</span> &lt;module&gt;
    main<span class="o">()</span>
  File <span class="s2">"main.py"</span>, line 151, <span class="k">in </span>main
    graph.update_scenegraph<span class="o">()</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/graph.py"</span>, line 716, <span class="k">in </span>update_scenegraph
    self.mapping3d<span class="o">()</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/graph.py"</span>, line 524, <span class="k">in </span>mapping3d
    spatial_sim <span class="o">=</span> compute_spatial_similarities<span class="o">(</span>self.cfg, fg_detection_list, self.objects<span class="o">)</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/utils/mapping.py"</span>, line 21, <span class="k">in </span>compute_spatial_similarities
    spatial_sim <span class="o">=</span> compute_overlap_matrix_2set<span class="o">(</span>cfg, objects, detection_list<span class="o">)</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/utils/utils.py"</span>, line 331, <span class="k">in </span>compute_overlap_matrix_2set
    iou <span class="o">=</span> compute_3d_iou_accuracte_batch<span class="o">(</span>bbox_map, bbox_new<span class="o">)</span> <span class="c"># (m, n)</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/utils/iou.py"</span>, line 58, <span class="k">in </span>compute_3d_iou_accuracte_batch
    import pytorch3d.ops as ops
ModuleNotFoundError: No module named <span class="s1">'pytorch3d'</span>

</code></pre></div></div> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install</span> <span class="s2">"git+https://github.com/facebookresearch/pytorch3d.git"</span> <span class="nt">-v</span> <span class="p">;</span> /usr/bin/shutdown  
<span class="c"># 一定要从从源码安装，不然很逆天</span>
<span class="c"># 会一堆警告，不用管，没停就是正常</span>
<span class="c"># 要在有GPU的环境下（如果你是租用平台，就得开着GPU）</span>
<span class="c"># 20分钟左右（实测23:44到00:07）</span>
</code></pre></div></div> <p>报错：graph.py 的<code class="language-plaintext highlighter-rouge">878</code>和<code class="language-plaintext highlighter-rouge">903</code>行 <code class="language-plaintext highlighter-rouge">AttributeError: 'numpy.ndarray' object has no attribute 'cpu'</code></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
  File <span class="s2">"main.py"</span>, line 259, <span class="k">in</span> &lt;module&gt;
    main<span class="o">()</span>
  File <span class="s2">"main.py"</span>, line 166, <span class="k">in </span>main
    goal <span class="o">=</span> graph.explore<span class="o">()</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/graph.py"</span>, line 732, <span class="k">in </span>explore
    goal <span class="o">=</span> self.get_goal<span class="o">(</span>goal<span class="o">)</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/graph.py"</span>, line 903, <span class="k">in </span>get_goal
    frontier_locations <span class="o">=</span> frontier_locations.cpu<span class="o">()</span>.numpy<span class="o">()</span>
AttributeError: <span class="s1">'numpy.ndarray'</span> object has no attribute <span class="s1">'cpu'</span>
</code></pre></div></div> <p>修改<code class="language-plaintext highlighter-rouge">/root/autodl-tmp/UniGoal/src/graph/graph.py</code>的<code class="language-plaintext highlighter-rouge">878</code>和<code class="language-plaintext highlighter-rouge">903</code>行：</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># frontier_locations = frontier_locations.cpu().numpy()
</span><span class="n">frontier_locations</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">tensor</span><span class="p">(</span><span class="n">frontier_locations</span><span class="p">).</span><span class="nf">cpu</span><span class="p">().</span><span class="nf">numpy</span><span class="p">()</span>
</code></pre></div></div> <p>报错：graph.py <code class="language-plaintext highlighter-rouge">get_goal(goal)</code> <code class="language-plaintext highlighter-rouge">917</code> 行<code class="language-plaintext highlighter-rouge">AttributeError: 'numpy.ndarray' object has no attribute 'cpu'</code></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    goal <span class="o">=</span> graph.explore<span class="o">()</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/graph.py"</span>, line 732, <span class="k">in </span>explore
    goal <span class="o">=</span> self.get_goal<span class="o">(</span>goal<span class="o">)</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/graph.py"</span>, line 917, <span class="k">in </span>get_goal
    scores +<span class="o">=</span> distances_16_inverse
ValueError: operands could not be broadcast together with shapes <span class="o">(</span>1016,<span class="o">)</span> <span class="o">(</span>934,<span class="o">)</span> <span class="o">(</span>1016,<span class="o">)</span>
</code></pre></div></div> <p>全面修改<code class="language-plaintext highlighter-rouge">get_goal(goal)</code> 函数：</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_goal</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">goal</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="n">fbe_map</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">zeros_like</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">full_map</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">])</span>
    <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">full_map</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">fbe_map</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">fbe_free_map</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1"># first free 
</span>        <span class="k">else</span><span class="p">:</span>
            <span class="n">fbe_map</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">full_map</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1"># first free 
</span>            <span class="n">fbe_map</span><span class="p">[</span><span class="n">skimage</span><span class="p">.</span><span class="n">morphology</span><span class="p">.</span><span class="nf">binary_dilation</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">full_map</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">cpu</span><span class="p">().</span><span class="nf">numpy</span><span class="p">(),</span> <span class="n">skimage</span><span class="p">.</span><span class="n">morphology</span><span class="p">.</span><span class="nf">disk</span><span class="p">(</span><span class="mi">4</span><span class="p">))]</span> <span class="o">=</span> <span class="mi">3</span>  <span class="c1"># dilate obstacle
</span>
            <span class="n">fbe_cp</span> <span class="o">=</span> <span class="n">copy</span><span class="p">.</span><span class="nf">deepcopy</span><span class="p">(</span><span class="n">fbe_map</span><span class="p">)</span>
            <span class="n">fbe_cpp</span> <span class="o">=</span> <span class="n">copy</span><span class="p">.</span><span class="nf">deepcopy</span><span class="p">(</span><span class="n">fbe_map</span><span class="p">)</span>
            <span class="n">fbe_cp</span><span class="p">[</span><span class="n">fbe_cp</span><span class="o">==</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span>  <span class="c1"># unknown space
</span>            <span class="n">fbe_cp</span><span class="p">[</span><span class="n">fbe_cp</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># free and obstacle
</span>            <span class="n">selem</span> <span class="o">=</span> <span class="n">skimage</span><span class="p">.</span><span class="n">morphology</span><span class="p">.</span><span class="nf">disk</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
            <span class="n">fbe_cpp</span><span class="p">[</span><span class="n">skimage</span><span class="p">.</span><span class="n">morphology</span><span class="p">.</span><span class="nf">binary_dilation</span><span class="p">(</span><span class="n">fbe_cp</span><span class="p">.</span><span class="nf">cpu</span><span class="p">().</span><span class="nf">numpy</span><span class="p">(),</span> <span class="n">selem</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># dilate unknown space
</span>
            <span class="n">diff</span> <span class="o">=</span> <span class="n">fbe_map</span> <span class="o">-</span> <span class="n">fbe_cpp</span>  <span class="c1"># frontier area
</span>            <span class="n">frontier_map</span> <span class="o">=</span> <span class="n">diff</span> <span class="o">==</span> <span class="mi">1</span>
            <span class="n">frontier_map</span> <span class="o">=</span> <span class="n">frontier_map</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">num_of_goal</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">).</span><span class="nf">to</span><span class="p">(</span><span class="n">frontier_map</span><span class="p">.</span><span class="n">device</span><span class="p">)</span>
            <span class="n">frontier_locations</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">stack</span><span class="p">([</span><span class="n">torch</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="n">frontier_map</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span> <span class="n">torch</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="n">frontier_map</span><span class="p">)[</span><span class="mi">1</span><span class="p">]]).</span><span class="n">T</span>
            <span class="n">num_frontiers</span> <span class="o">=</span> <span class="n">frontier_locations</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">num_frontiers</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">None</span>

            <span class="c1"># 统一使用初始前沿位置计算 --------------------------------------------------
</span>            <span class="n">input_pose</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
            <span class="n">input_pose</span><span class="p">[:</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">full_pose</span><span class="p">.</span><span class="nf">cpu</span><span class="p">().</span><span class="nf">numpy</span><span class="p">()</span>
            <span class="n">input_pose</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">map_size_cm</span><span class="o">/</span><span class="mi">100</span> <span class="o">-</span> <span class="n">input_pose</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">input_pose</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="n">input_pose</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
            <span class="n">input_pose</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">full_map</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
            <span class="n">input_pose</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">full_map</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">traversible</span><span class="p">,</span> <span class="n">start</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">get_traversible</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">full_map</span><span class="p">.</span><span class="nf">cpu</span><span class="p">().</span><span class="nf">numpy</span><span class="p">()[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">::</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">input_pose</span><span class="p">)</span>

            <span class="c1"># 初始距离计算
</span>            <span class="n">planner</span> <span class="o">=</span> <span class="nc">FMMPlanner</span><span class="p">(</span><span class="n">traversible</span><span class="p">)</span>
            <span class="n">state</span> <span class="o">=</span> <span class="p">[</span><span class="n">start</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">start</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
            <span class="n">planner</span><span class="p">.</span><span class="nf">set_goal</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
            <span class="n">fmm_dist</span> <span class="o">=</span> <span class="n">planner</span><span class="p">.</span><span class="n">fmm_dist</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

            <span class="c1"># 统一将前沿位置转换为numpy并计算初始距离
</span>            <span class="n">frontier_locations_np</span> <span class="o">=</span> <span class="n">frontier_locations</span><span class="p">.</span><span class="nf">cpu</span><span class="p">().</span><span class="nf">numpy</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span>  <span class="c1"># 加1补偿坐标偏移
</span>            <span class="n">distances</span> <span class="o">=</span> <span class="n">fmm_dist</span><span class="p">[</span><span class="n">frontier_locations_np</span><span class="p">[:,</span><span class="mi">0</span><span class="p">],</span> <span class="n">frontier_locations_np</span><span class="p">[:,</span><span class="mi">1</span><span class="p">]]</span> <span class="o">/</span> <span class="mi">20</span>

            <span class="c1"># 初始前沿筛选
</span>            <span class="n">distance_threshold</span> <span class="o">=</span> <span class="mi">3</span>
            <span class="n">valid_mask</span> <span class="o">=</span> <span class="n">distances</span> <span class="o">&gt;=</span> <span class="n">distance_threshold</span>
            <span class="n">valid_distances</span> <span class="o">=</span> <span class="n">distances</span><span class="p">[</span><span class="n">valid_mask</span><span class="p">]</span>
            <span class="n">valid_locations</span> <span class="o">=</span> <span class="n">frontier_locations_np</span><span class="p">[</span><span class="n">valid_mask</span><span class="p">]</span>  <span class="c1"># 保存有效前沿位置
</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">valid_distances</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">None</span>

            <span class="c1"># 初始化scores
</span>            <span class="n">scores</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">-</span> <span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">clip</span><span class="p">(</span><span class="n">valid_distances</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">distance_threshold</span><span class="p">)</span> <span class="o">-</span> <span class="n">distance_threshold</span><span class="p">)</span>

            <span class="c1"># 处理传入的goal时使用同一组前沿位置 ----------------------------------------
</span>            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">goal</span><span class="p">,</span> <span class="p">(</span><span class="nb">list</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">)):</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="c1"># 使用已筛选的有效前沿计算新距离
</span>                    <span class="n">planner_goal</span> <span class="o">=</span> <span class="nc">FMMPlanner</span><span class="p">(</span><span class="n">traversible</span><span class="p">)</span>
                    <span class="n">state_goal</span> <span class="o">=</span> <span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">goal</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">goal</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
                    <span class="n">planner_goal</span><span class="p">.</span><span class="nf">set_goal</span><span class="p">(</span><span class="n">state_goal</span><span class="p">)</span>
                    <span class="n">fmm_dist_goal</span> <span class="o">=</span> <span class="n">planner_goal</span><span class="p">.</span><span class="n">fmm_dist</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

                    <span class="c1"># 直接使用valid_locations计算距离
</span>                    <span class="n">goal_distances</span> <span class="o">=</span> <span class="n">fmm_dist_goal</span><span class="p">[</span><span class="n">valid_locations</span><span class="p">[:,</span><span class="mi">0</span><span class="p">],</span> <span class="n">valid_locations</span><span class="p">[:,</span><span class="mi">1</span><span class="p">]]</span> <span class="o">/</span> <span class="mi">20</span>
                    <span class="n">goal_scores</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">clip</span><span class="p">(</span><span class="n">goal_distances</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">distance_threshold</span><span class="p">)</span> <span class="o">-</span> <span class="n">distance_threshold</span><span class="p">)</span><span class="o">/</span><span class="mi">10</span>
                    <span class="n">scores</span> <span class="o">+=</span> <span class="n">goal_scores</span>  <span class="c1"># 保证形状一致
</span>
                    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Goal processing error: </span><span class="si">{</span><span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

                        <span class="c1"># 最终目标选择
</span>                        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                            <span class="k">return</span> <span class="bp">None</span>
                        <span class="n">best_idx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
                        <span class="n">final_goal</span> <span class="o">=</span> <span class="n">valid_locations</span><span class="p">[</span><span class="n">best_idx</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span>  <span class="c1"># 补偿坐标偏移
</span>                        <span class="k">return</span> <span class="n">final_goal</span>
</code></pre></div></div> <p>KeyError: 6</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rank:0, episode:8, cat_id:0, cat_name:chair
Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
  File <span class="s2">"main.py"</span>, line 259, <span class="k">in</span> &lt;module&gt;
    main<span class="o">()</span>
  File <span class="s2">"main.py"</span>, line 205, <span class="k">in </span>main
    obs, _, <span class="k">done</span>, infos, observations_habitat <span class="o">=</span> agent.step<span class="o">(</span>agent_input<span class="o">)</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/agent/unigoal/agent.py"</span>, line 404, <span class="k">in </span>step
    self.reset<span class="o">()</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/agent/unigoal/agent.py"</span>, line 89, <span class="k">in </span>reset
    self.envs.set_goal_cat_id<span class="o">(</span>idx<span class="o">)</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/envs/habitat/instanceimagegoal_env.py"</span>, line 264, <span class="k">in </span>set_goal_cat_id
    self.info[<span class="s1">'goal_name'</span><span class="o">]</span> <span class="o">=</span> self.index2name[idx]
KeyError: 6
</code></pre></div></div> <p>在agent.py 692行修改：</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="nf">if </span><span class="p">((</span><span class="n">ins_whwh</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="n">ins_whwh</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="n">self</span><span class="p">.</span><span class="n">instance_imagegoal</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> \
                    <span class="o">+</span><span class="p">((</span><span class="n">ins_whwh</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="n">ins_whwh</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span><span class="o">-</span><span class="n">self</span><span class="p">.</span><span class="n">instance_imagegoal</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">&lt;</span> \
                        <span class="p">((</span><span class="n">self</span><span class="p">.</span><span class="n">instance_imagegoal</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">/</span> <span class="mi">6</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="p">)</span><span class="o">*</span><span class="mi">2</span><span class="p">:</span>
                <span class="c1"># return int(ins_whwh[0][0])
</span>                <span class="n">cat_id</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">ins_whwh</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
                <span class="c1"># 添加有效性检查
</span>                <span class="k">if</span> <span class="n">cat_id</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">envs</span><span class="p">.</span><span class="n">index2name</span><span class="p">:</span>
                	<span class="k">return</span> <span class="n">cat_id</span>
        <span class="k">return</span> <span class="bp">None</span>
    <span class="bp">...</span>
</code></pre></div></div> <p>加入轮次选择 main.py</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>]]></content><author><name></name></author><category term="Experience"/><category term="Debug"/><category term="Deploy"/><summary type="html"><![CDATA[Ai2THOR-ProcTHOR]]></summary></entry><entry><title type="html">RoboTHOR</title><link href="https://son4ta.github.io/blog/2025/UniGoal/" rel="alternate" type="text/html" title="RoboTHOR"/><published>2025-05-30T14:32:13+00:00</published><updated>2025-05-30T14:32:13+00:00</updated><id>https://son4ta.github.io/blog/2025/UniGoal</id><content type="html" xml:base="https://son4ta.github.io/blog/2025/UniGoal/"><![CDATA[<h1 id="robothor">RoboTHOR</h1> <p>在机器人导航领域，现有方法通常针对特定任务（如物体导航、图像导航或文本导航）设计独立框架，导致模型泛化能力受限且难以应对真实场景中复杂的多模态指令。为此，本研究提出UniGoal ——首个零样本学习的通用目标导航框架，通过统一的图表示与大语言模型（LLM）推理 ，实现了跨物体类别、图像和文本描述三类任务的零样本导航。其核心创新在于：（1）构建动态场景图与目标图的统一表示，将环境感知与目标描述转化为结构化图，保留丰富的空间与语义关系；（2）设计<a href="https://zhida.zhihu.com/search?content_id=255217302&amp;content_type=Article&amp;match_order=1&amp;q=多阶段探索策略&amp;zhida_source=entity">多阶段探索策略</a>，根据图匹配程度动态调整探索策略，在零匹配阶段通过子图分解逐步探索未知区域，部分匹配时利用坐标投影与锚点对齐推断目标位置，完全匹配时通过场景图修正与验证确保定位准确。此外，引入<a href="https://zhida.zhihu.com/search?content_id=255217302&amp;content_type=Article&amp;match_order=1&amp;q=黑名单机制&amp;zhida_source=entity">黑名单机制</a>避免重复探索失败区域，显著提升效率。</p> <p>UniGoal的推理流程以图匹配为核心，结合LLM的推理能力实现高效决策。在场景图构建中，实时融合RGB-D观测中的语义信息，形成拓扑结构。目标图则根据输入类型（物体类别、图像或文本）通过LLM/VLM处理生成，确保与场景图表示的一致性。实验表明，UniGoal在<a href="https://zhida.zhihu.com/search?content_id=255217302&amp;content_type=Article&amp;match_order=1&amp;q=MatterPort3D&amp;zhida_source=entity">MatterPort3D</a>、<a href="https://zhida.zhihu.com/search?content_id=255217302&amp;content_type=Article&amp;match_order=1&amp;q=HM3D&amp;zhida_source=entity">HM3D</a>等数据集上全面超越现有零样本的专用任务方法（如<a href="https://zhida.zhihu.com/search?content_id=255217302&amp;content_type=Article&amp;match_order=1&amp;q=Mod-IIN&amp;zhida_source=entity">Mod-IIN</a>[1]、SG-Nav[2]）及需训练的通用方法（如<a href="https://zhida.zhihu.com/search?content_id=255217302&amp;content_type=Article&amp;match_order=1&amp;q=GOAT&amp;zhida_source=entity">GOAT</a>[3]），在物体导航（成功率41.0%）、图像实例导航（成功率60.2%）和文本导航（成功率20.2%）任务中均达最优性能。其无需训练的特性与多模态通用性，为机器人在未知环境中的灵活导航提供了全新范式，拥有在真实场景落地的潜力。</p> <table> <tbody> <tr> <td>——[CVPR2025</td> <td>UniGoal：通用零样本目标导航，Navigate to Any Goal! - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/30973430092)</td> </tr> </tbody> </table> <h2 id="环境配置">环境配置</h2> <h3 id="一conda">一、Conda</h3> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/bagh2178/UniGoal.git
<span class="nb">cd </span>UniGoal
conda create <span class="nt">-n</span> unigoal <span class="nv">python</span><span class="o">==</span>3.8
conda activate unigoal

<span class="c"># AutoDL的学术加速</span>
<span class="nb">source</span> /etc/network_turbo
<span class="nb">unset </span>http_proxy <span class="o">&amp;&amp;</span> <span class="nb">unset </span>https_proxy
</code></pre></div></div> <h3 id="二habitat-sim-023----habitat-lab">二、Habitat-sim-0.2.3 &amp; Habitat-lab</h3> <p>请注意，这里的Python一定要是<code class="language-plaintext highlighter-rouge">==3.8</code></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda <span class="nb">install </span>habitat-sim<span class="o">==</span>0.2.3 <span class="nt">-c</span> conda-forge <span class="nt">-c</span> aihabitat
pip <span class="nb">install</span> <span class="nt">-e</span> third_party/habitat-lab
</code></pre></div></div> <h3 id="三安装第三方包">三、安装第三方包</h3> <h4 id="1-lightglue-githubcomcvglightgluegit">1. <strong>LightGlue</strong> (<code class="language-plaintext highlighter-rouge">github.com/cvg/LightGlue.git</code>)</h4> <p>功能：一种基于深度学习的局部特征匹配算法，专为稀疏特征匹配设计。它通过自适应计算机制动态调整推理深度和特征点数量，显著提升了匹配效率和精度</p> <ul> <li>支持自省机制，可提前终止简单图像对的推理过程</li> <li>在3D重建、SLAM等对实时性要求高的场景中表现优异</li> </ul> <h4 id="2-detectron2-githubcomfacebookresearchdetectron2git">2. <strong>Detectron2</strong> (<code class="language-plaintext highlighter-rouge">github.com/facebookresearch/detectron2.git</code>)</h4> <p>功能：Meta开源的计算机视觉工具库，支持目标检测、实例分割、关键点检测等任务</p> <ul> <li>提供预训练模型如Faster R-CNN、Mask R-CNN等</li> <li>支持灵活的配置系统和分布式训练</li> </ul> <h4 id="3-grounded-segment-anything-idea-researchgrounded-segment-anything">3. <strong>Grounded-Segment-Anything</strong> (<code class="language-plaintext highlighter-rouge">IDEA-Research/Grounded-Segment-Anything</code>)</h4> <p>核心组件:</p> <ul> <li> <p><strong>Segment Anything (SAM)</strong></p> <p>功能：Meta提出的通用图像分割模型，支持零样本分割（无需预训练即可分割任意物体）</p> <p>模型文件：<code class="language-plaintext highlighter-rouge">sam_vit_h_4b8939.pth</code></p> <p>是其预训练权重，适用于高精度分割任务</p> </li> <li> <p><strong>GroundingDINO</strong></p> <p>功能：基于文本提示的零样本目标检测模型，可将自然语言描述与图像中的物体关联</p> <ul> <li><strong>模型文件</strong>：<code class="language-plaintext highlighter-rouge">groundingdino_swint_ogc.pth</code>是其预训练权重，支持如“检测戴帽子的人”等复杂语义查询</li> </ul> </li> </ul> <h4 id="4-依赖项与模型文件">4. <strong>依赖项与模型文件</strong></h4> <p><code class="language-plaintext highlighter-rouge">segment_anything</code>：SAM的PyTorch实现，提供图像分割基础功能</p> <p><code class="language-plaintext highlighter-rouge">GroundingDINO依赖</code>：包含文本-图像特征融合模块，支持多模态目标检测</p> <p>模型文件用途：</p> <ul> <li><code class="language-plaintext highlighter-rouge">sam_vit_h_4b8939.pth</code>：SAM的ViT-Huge模型权重，适合高精度分割。</li> <li><code class="language-plaintext highlighter-rouge">groundingdino_swint_ogc.pth</code>：GroundingDINO的Swin Transformer权重，支持文本引导检测。</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>git+https://github.com/cvg/LightGlue.git
pip <span class="nb">install </span>git+https://github.com/facebookresearch/detectron2.git <span class="c"># 请保证有足够的运行内存编译</span>
git clone https://github.com/IDEA-Research/Grounded-Segment-Anything.git third_party/Grounded-Segment-Anything
<span class="nb">cd </span>third_party/Grounded-Segment-Anything
git checkout 5cb813f <span class="c"># 会得到一个警告：分离头指针状态，不用理会</span>
pip <span class="nb">install</span> <span class="nt">-e</span> segment_anything
pip <span class="nb">install</span> <span class="nt">--no-build-isolation</span> <span class="nt">-e</span> GroundingDINO
<span class="nb">cd</span> ../../
<span class="nb">mkdir</span> <span class="nt">-p</span> data/models/  <span class="c"># -p 参数自动创建多级目录，这里原作者没搞，wget -O 参数指定的是完整文件路径，不会自动创建目录</span>
wget <span class="nt">-O</span> data/models/sam_vit_h_4b8939.pth https://dl.fbaipublicfiles.com/segment_anything/sam_vit_h_4b8939.pth
<span class="c"># data/models/sam_vit_h_4b 100%[=================================&gt;]   2.39G  13.5MB/s    in 3m 9s</span>

<span class="c"># source /etc/network_turbo 这里需要VPN ↓</span>
wget <span class="nt">-O</span> data/models/groundingdino_swint_ogc.pth https://github.com/IDEA-Research/GroundingDINO/releases/download/v0.1.0-alpha/groundingdino_swint_ogc.pth
<span class="c"># data/models/groundingdin 100%[=================================&gt;] 661.85M   121MB/s    in 5.5s</span>
</code></pre></div></div> <h3 id="四安装别的小东西">四、安装别的小东西</h3> <p><code class="language-plaintext highlighter-rouge">pytorch::faiss-gpu</code> 是 Meta AI 开发的 <strong>GPU 加速版 Faiss 库</strong>，专为大规模向量相似性搜索和聚类设计，可能和图搜索有关系</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda <span class="nb">install </span>pytorch::faiss-gpu
pip <span class="nb">install</span> <span class="nt">-r</span> requirements.txt
</code></pre></div></div> <p>至此，环境配置完成。</p> <h2 id="数据集hm3d">数据集（HM3D）</h2> <h3 id="数据集下载">数据集下载</h3> <p>为了数据集组织正确，先创建文件夹：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir -p data/datasets/instance_imagenav/hm3d/v3/
mkdir -p data/scene_datasets/hm3d_v0.2/val/
</code></pre></div></div> <p>然后，下载两个压缩包：</p> <p>https://dl.fbaipublicfiles.com/habitat/data/datasets/imagenav/hm3d/v3/instance_imagenav_hm3d_v3.zip</p> <p>https://mp-app-prod.s3.amazonaws.com/habitat/v1.0/hm3d-val-habitat-v0.2.tar</p> <p>最后，对于<code class="language-plaintext highlighter-rouge">instance_imagenav_hm3d_v3.zip</code>，把<code class="language-plaintext highlighter-rouge">val</code>、<code class="language-plaintext highlighter-rouge">train</code>和<code class="language-plaintext highlighter-rouge">val_mini</code>复制到<code class="language-plaintext highlighter-rouge">data/datasets/instance_imagenav/hm3d/v3/</code>下面</p> <p>对于<code class="language-plaintext highlighter-rouge">hm3d-val-habitat-v0.2.tar</code>，一样操作</p> <p>注意，需要这么组织数据集，名字也要一模一样：</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>UniGoal/
└── data/
    ├── datasets/
    │   └── instance_imagenav/
    │       └── hm3d/
    │           └── v3/
    │               └── val/
    │                   ├── content/
    │                   │   ├── 4ok3usBNeis.json.gz
    │                   │   ├── 5cdEh9F2hJL.json.gz
    │                   │   ├── ...
    │                   │   └── zt1RVoi7PcG.json.gz
    │                   └── val.json.gz
    └── scene_datasets/
        └── hm3d_v0.2/
            └── val/
                ├── 00800-TEEsavR23oF/
                │   ├── TEEsavR23oF.basis.glb
                │   └── TEEsavR23oF.basis.navmesh
                ├── 00801-HaxA7YrQdEC/
                ├── ...
                └── 00899-58NLZxWBSpk/
</code></pre></div></div> <h2 id="llm-and-vlm"><strong>LLM and VLM</strong></h2> <p>Option 1: Install Ollama.【我们这里使用这个选项】</p> <p><a href="https://ollama.readthedocs.io/linux/#ollama">Linux 文档 - Ollama 中文文档</a></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># source /etc/network_turbo</span>
curl <span class="nt">-fsSL</span> https://ollama.com/install.sh | sh

<span class="c"># 如果你没有GPU的情况下，ollama会自行关闭，需要重新启动</span>
ollama serve &amp;

ollama pull llama3.2-vision
<span class="c"># ollama支持中断继续下载，放心Kill</span>
<span class="nb">export </span><span class="nv">HF_ENDPOINT</span><span class="o">=</span>https://hf-mirror.com
</code></pre></div></div> <p><img src="S:\Programming\Son4ta.github.io\Son4ta.github.io\assets\img\image-20250425170952781.png" alt="image-20250425170952781"/></p> <p>Option 2: Use LLM and VLM via your own API. Change the <code class="language-plaintext highlighter-rouge">llm_model</code>, <code class="language-plaintext highlighter-rouge">vlm_model</code>, <code class="language-plaintext highlighter-rouge">api_key</code>, <code class="language-plaintext highlighter-rouge">base_url</code> in the configuration file <code class="language-plaintext highlighter-rouge">configs/config_habitat.yaml</code> to your own.</p> <h2 id="evaluation">Evaluation</h2> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ollama serve &amp; <span class="c"># 如果没启动</span>
<span class="nb">nohup </span>ollama serve &amp; <span class="c"># 这会启动Ollama后台服务。保持此终端运行或使用nohup将其置于后台</span>
netstat <span class="nt">-tuln</span> | <span class="nb">grep </span>11434 <span class="c"># 运行以下命令查看11434端口是否被监听</span>

<span class="nv">CUDA_VISIBLE_DEVICES</span><span class="o">=</span>0 python main.py  <span class="c"># instance-image-goal</span>
</code></pre></div></div> <h2 id="debug">DeBug</h2> <p>报错<code class="language-plaintext highlighter-rouge">ImportError: libEGL.so.1: cannot open shared object file: No such file or directory</code></p> <p>觉得眼熟？ImportError正在全世界发生！</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    import habitat_sim
  File <span class="s2">"/root/miniconda3/envs/unigoal/lib/python3.8/site-packages/habitat_sim-0.2.3-py3.8-linux-x86_64.egg/habitat_sim/__init__.py"</span>, line 13, <span class="k">in</span> &lt;module&gt;
    import habitat_sim._ext.habitat_sim_bindings
ImportError: libEGL.so.1: cannot open shared object file: No such file or directory
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install </span>libegl1 mesa-utils libgl1-mesa-glx
</code></pre></div></div> <p>报错<code class="language-plaintext highlighter-rouge">ModuleNotFoundError: No module named 'openai'</code></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
  File <span class="s2">"main.py"</span>, line 15, <span class="k">in</span> &lt;module&gt;
    from src.graph.graph import Graph
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/graph.py"</span>, line 9, <span class="k">in</span> &lt;module&gt;
    from openai import OpenAI
ModuleNotFoundError: No module named <span class="s1">'openai'</span>
</code></pre></div></div> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>openai
</code></pre></div></div> <p>报错<code class="language-plaintext highlighter-rouge">ImportError: libmkl_intel_lp64.so.1: cannot open shared object file: No such file or directory</code></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
  File <span class="s2">"main.py"</span>, line 15, <span class="k">in</span> &lt;module&gt;
    from src.graph.graph import Graph
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/graph.py"</span>, line 28, <span class="k">in</span> &lt;module&gt;
    from .utils.utils import filter_objects, gobs_to_detection_list
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/utils/utils.py"</span>, line 7, <span class="k">in</span> &lt;module&gt;
    import faiss
  File <span class="s2">"/root/miniconda3/envs/unigoal/lib/python3.8/site-packages/faiss/__init__.py"</span>, line 16, <span class="k">in</span> &lt;module&gt;
    from .loader import <span class="k">*</span>
  File <span class="s2">"/root/miniconda3/envs/unigoal/lib/python3.8/site-packages/faiss/loader.py"</span>, line 65, <span class="k">in</span> &lt;module&gt;
    from .swigfaiss import <span class="k">*</span>
  File <span class="s2">"/root/miniconda3/envs/unigoal/lib/python3.8/site-packages/faiss/swigfaiss.py"</span>, line 13, <span class="k">in</span> &lt;module&gt;
    from <span class="nb">.</span> import _swigfaiss
ImportError: libmkl_intel_lp64.so.1: cannot open shared object file: No such file or directory
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda <span class="nb">install </span><span class="nv">mkl</span><span class="o">=</span>2021 
</code></pre></div></div> <p>报错<code class="language-plaintext highlighter-rouge">ImportError: libmkl_intel_lp64.so.1: cannot open shared object file: No such file or directory</code></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>num timesteps 0, episode_idx 0
update_observation 6...
    mapping3d...
        compute_spatial_similarities...
Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
  File <span class="s2">"main.py"</span>, line 259, <span class="k">in</span> &lt;module&gt;
    main<span class="o">()</span>
  File <span class="s2">"main.py"</span>, line 151, <span class="k">in </span>main
    graph.update_scenegraph<span class="o">()</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/graph.py"</span>, line 716, <span class="k">in </span>update_scenegraph
    self.mapping3d<span class="o">()</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/graph.py"</span>, line 524, <span class="k">in </span>mapping3d
    spatial_sim <span class="o">=</span> compute_spatial_similarities<span class="o">(</span>self.cfg, fg_detection_list, self.objects<span class="o">)</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/utils/mapping.py"</span>, line 21, <span class="k">in </span>compute_spatial_similarities
    spatial_sim <span class="o">=</span> compute_overlap_matrix_2set<span class="o">(</span>cfg, objects, detection_list<span class="o">)</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/utils/utils.py"</span>, line 331, <span class="k">in </span>compute_overlap_matrix_2set
    iou <span class="o">=</span> compute_3d_iou_accuracte_batch<span class="o">(</span>bbox_map, bbox_new<span class="o">)</span> <span class="c"># (m, n)</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/utils/iou.py"</span>, line 58, <span class="k">in </span>compute_3d_iou_accuracte_batch
    import pytorch3d.ops as ops
ModuleNotFoundError: No module named <span class="s1">'pytorch3d'</span>

</code></pre></div></div> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install</span> <span class="s2">"git+https://github.com/facebookresearch/pytorch3d.git"</span> <span class="nt">-v</span> <span class="p">;</span> /usr/bin/shutdown  
<span class="c"># 一定要从从源码安装，不然很逆天</span>
<span class="c"># 会一堆警告，不用管，没停就是正常</span>
<span class="c"># 要在有GPU的环境下（如果你是租用平台，就得开着GPU）</span>
<span class="c"># 20分钟左右（实测23:44到00:07）</span>
</code></pre></div></div> <p>报错：graph.py 的<code class="language-plaintext highlighter-rouge">878</code>和<code class="language-plaintext highlighter-rouge">903</code>行 <code class="language-plaintext highlighter-rouge">AttributeError: 'numpy.ndarray' object has no attribute 'cpu'</code></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
  File <span class="s2">"main.py"</span>, line 259, <span class="k">in</span> &lt;module&gt;
    main<span class="o">()</span>
  File <span class="s2">"main.py"</span>, line 166, <span class="k">in </span>main
    goal <span class="o">=</span> graph.explore<span class="o">()</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/graph.py"</span>, line 732, <span class="k">in </span>explore
    goal <span class="o">=</span> self.get_goal<span class="o">(</span>goal<span class="o">)</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/graph.py"</span>, line 903, <span class="k">in </span>get_goal
    frontier_locations <span class="o">=</span> frontier_locations.cpu<span class="o">()</span>.numpy<span class="o">()</span>
AttributeError: <span class="s1">'numpy.ndarray'</span> object has no attribute <span class="s1">'cpu'</span>
</code></pre></div></div> <p>修改<code class="language-plaintext highlighter-rouge">/root/autodl-tmp/UniGoal/src/graph/graph.py</code>的<code class="language-plaintext highlighter-rouge">878</code>和<code class="language-plaintext highlighter-rouge">903</code>行：</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># frontier_locations = frontier_locations.cpu().numpy()
</span><span class="n">frontier_locations</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">tensor</span><span class="p">(</span><span class="n">frontier_locations</span><span class="p">).</span><span class="nf">cpu</span><span class="p">().</span><span class="nf">numpy</span><span class="p">()</span>
</code></pre></div></div> <p>报错：graph.py <code class="language-plaintext highlighter-rouge">get_goal(goal)</code> <code class="language-plaintext highlighter-rouge">917</code> 行<code class="language-plaintext highlighter-rouge">AttributeError: 'numpy.ndarray' object has no attribute 'cpu'</code></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    goal <span class="o">=</span> graph.explore<span class="o">()</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/graph.py"</span>, line 732, <span class="k">in </span>explore
    goal <span class="o">=</span> self.get_goal<span class="o">(</span>goal<span class="o">)</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/graph.py"</span>, line 917, <span class="k">in </span>get_goal
    scores +<span class="o">=</span> distances_16_inverse
ValueError: operands could not be broadcast together with shapes <span class="o">(</span>1016,<span class="o">)</span> <span class="o">(</span>934,<span class="o">)</span> <span class="o">(</span>1016,<span class="o">)</span>
</code></pre></div></div> <p>全面修改<code class="language-plaintext highlighter-rouge">get_goal(goal)</code> 函数：</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_goal</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">goal</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="n">fbe_map</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">zeros_like</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">full_map</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">])</span>
    <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">full_map</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">fbe_map</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">fbe_free_map</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1"># first free 
</span>        <span class="k">else</span><span class="p">:</span>
            <span class="n">fbe_map</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">full_map</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1"># first free 
</span>            <span class="n">fbe_map</span><span class="p">[</span><span class="n">skimage</span><span class="p">.</span><span class="n">morphology</span><span class="p">.</span><span class="nf">binary_dilation</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">full_map</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">cpu</span><span class="p">().</span><span class="nf">numpy</span><span class="p">(),</span> <span class="n">skimage</span><span class="p">.</span><span class="n">morphology</span><span class="p">.</span><span class="nf">disk</span><span class="p">(</span><span class="mi">4</span><span class="p">))]</span> <span class="o">=</span> <span class="mi">3</span>  <span class="c1"># dilate obstacle
</span>
            <span class="n">fbe_cp</span> <span class="o">=</span> <span class="n">copy</span><span class="p">.</span><span class="nf">deepcopy</span><span class="p">(</span><span class="n">fbe_map</span><span class="p">)</span>
            <span class="n">fbe_cpp</span> <span class="o">=</span> <span class="n">copy</span><span class="p">.</span><span class="nf">deepcopy</span><span class="p">(</span><span class="n">fbe_map</span><span class="p">)</span>
            <span class="n">fbe_cp</span><span class="p">[</span><span class="n">fbe_cp</span><span class="o">==</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span>  <span class="c1"># unknown space
</span>            <span class="n">fbe_cp</span><span class="p">[</span><span class="n">fbe_cp</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># free and obstacle
</span>            <span class="n">selem</span> <span class="o">=</span> <span class="n">skimage</span><span class="p">.</span><span class="n">morphology</span><span class="p">.</span><span class="nf">disk</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
            <span class="n">fbe_cpp</span><span class="p">[</span><span class="n">skimage</span><span class="p">.</span><span class="n">morphology</span><span class="p">.</span><span class="nf">binary_dilation</span><span class="p">(</span><span class="n">fbe_cp</span><span class="p">.</span><span class="nf">cpu</span><span class="p">().</span><span class="nf">numpy</span><span class="p">(),</span> <span class="n">selem</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># dilate unknown space
</span>
            <span class="n">diff</span> <span class="o">=</span> <span class="n">fbe_map</span> <span class="o">-</span> <span class="n">fbe_cpp</span>  <span class="c1"># frontier area
</span>            <span class="n">frontier_map</span> <span class="o">=</span> <span class="n">diff</span> <span class="o">==</span> <span class="mi">1</span>
            <span class="n">frontier_map</span> <span class="o">=</span> <span class="n">frontier_map</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">num_of_goal</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">).</span><span class="nf">to</span><span class="p">(</span><span class="n">frontier_map</span><span class="p">.</span><span class="n">device</span><span class="p">)</span>
            <span class="n">frontier_locations</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">stack</span><span class="p">([</span><span class="n">torch</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="n">frontier_map</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span> <span class="n">torch</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="n">frontier_map</span><span class="p">)[</span><span class="mi">1</span><span class="p">]]).</span><span class="n">T</span>
            <span class="n">num_frontiers</span> <span class="o">=</span> <span class="n">frontier_locations</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">num_frontiers</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">None</span>

            <span class="c1"># 统一使用初始前沿位置计算 --------------------------------------------------
</span>            <span class="n">input_pose</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
            <span class="n">input_pose</span><span class="p">[:</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">full_pose</span><span class="p">.</span><span class="nf">cpu</span><span class="p">().</span><span class="nf">numpy</span><span class="p">()</span>
            <span class="n">input_pose</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">map_size_cm</span><span class="o">/</span><span class="mi">100</span> <span class="o">-</span> <span class="n">input_pose</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">input_pose</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="n">input_pose</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
            <span class="n">input_pose</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">full_map</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
            <span class="n">input_pose</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">full_map</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">traversible</span><span class="p">,</span> <span class="n">start</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">get_traversible</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">full_map</span><span class="p">.</span><span class="nf">cpu</span><span class="p">().</span><span class="nf">numpy</span><span class="p">()[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">::</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">input_pose</span><span class="p">)</span>

            <span class="c1"># 初始距离计算
</span>            <span class="n">planner</span> <span class="o">=</span> <span class="nc">FMMPlanner</span><span class="p">(</span><span class="n">traversible</span><span class="p">)</span>
            <span class="n">state</span> <span class="o">=</span> <span class="p">[</span><span class="n">start</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">start</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
            <span class="n">planner</span><span class="p">.</span><span class="nf">set_goal</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
            <span class="n">fmm_dist</span> <span class="o">=</span> <span class="n">planner</span><span class="p">.</span><span class="n">fmm_dist</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

            <span class="c1"># 统一将前沿位置转换为numpy并计算初始距离
</span>            <span class="n">frontier_locations_np</span> <span class="o">=</span> <span class="n">frontier_locations</span><span class="p">.</span><span class="nf">cpu</span><span class="p">().</span><span class="nf">numpy</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span>  <span class="c1"># 加1补偿坐标偏移
</span>            <span class="n">distances</span> <span class="o">=</span> <span class="n">fmm_dist</span><span class="p">[</span><span class="n">frontier_locations_np</span><span class="p">[:,</span><span class="mi">0</span><span class="p">],</span> <span class="n">frontier_locations_np</span><span class="p">[:,</span><span class="mi">1</span><span class="p">]]</span> <span class="o">/</span> <span class="mi">20</span>

            <span class="c1"># 初始前沿筛选
</span>            <span class="n">distance_threshold</span> <span class="o">=</span> <span class="mi">3</span>
            <span class="n">valid_mask</span> <span class="o">=</span> <span class="n">distances</span> <span class="o">&gt;=</span> <span class="n">distance_threshold</span>
            <span class="n">valid_distances</span> <span class="o">=</span> <span class="n">distances</span><span class="p">[</span><span class="n">valid_mask</span><span class="p">]</span>
            <span class="n">valid_locations</span> <span class="o">=</span> <span class="n">frontier_locations_np</span><span class="p">[</span><span class="n">valid_mask</span><span class="p">]</span>  <span class="c1"># 保存有效前沿位置
</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">valid_distances</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">None</span>

            <span class="c1"># 初始化scores
</span>            <span class="n">scores</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">-</span> <span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">clip</span><span class="p">(</span><span class="n">valid_distances</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">distance_threshold</span><span class="p">)</span> <span class="o">-</span> <span class="n">distance_threshold</span><span class="p">)</span>

            <span class="c1"># 处理传入的goal时使用同一组前沿位置 ----------------------------------------
</span>            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">goal</span><span class="p">,</span> <span class="p">(</span><span class="nb">list</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">)):</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="c1"># 使用已筛选的有效前沿计算新距离
</span>                    <span class="n">planner_goal</span> <span class="o">=</span> <span class="nc">FMMPlanner</span><span class="p">(</span><span class="n">traversible</span><span class="p">)</span>
                    <span class="n">state_goal</span> <span class="o">=</span> <span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">goal</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">goal</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
                    <span class="n">planner_goal</span><span class="p">.</span><span class="nf">set_goal</span><span class="p">(</span><span class="n">state_goal</span><span class="p">)</span>
                    <span class="n">fmm_dist_goal</span> <span class="o">=</span> <span class="n">planner_goal</span><span class="p">.</span><span class="n">fmm_dist</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

                    <span class="c1"># 直接使用valid_locations计算距离
</span>                    <span class="n">goal_distances</span> <span class="o">=</span> <span class="n">fmm_dist_goal</span><span class="p">[</span><span class="n">valid_locations</span><span class="p">[:,</span><span class="mi">0</span><span class="p">],</span> <span class="n">valid_locations</span><span class="p">[:,</span><span class="mi">1</span><span class="p">]]</span> <span class="o">/</span> <span class="mi">20</span>
                    <span class="n">goal_scores</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">clip</span><span class="p">(</span><span class="n">goal_distances</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">distance_threshold</span><span class="p">)</span> <span class="o">-</span> <span class="n">distance_threshold</span><span class="p">)</span><span class="o">/</span><span class="mi">10</span>
                    <span class="n">scores</span> <span class="o">+=</span> <span class="n">goal_scores</span>  <span class="c1"># 保证形状一致
</span>
                    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Goal processing error: </span><span class="si">{</span><span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

                        <span class="c1"># 最终目标选择
</span>                        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                            <span class="k">return</span> <span class="bp">None</span>
                        <span class="n">best_idx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
                        <span class="n">final_goal</span> <span class="o">=</span> <span class="n">valid_locations</span><span class="p">[</span><span class="n">best_idx</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span>  <span class="c1"># 补偿坐标偏移
</span>                        <span class="k">return</span> <span class="n">final_goal</span>
</code></pre></div></div> <p>KeyError: 6</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rank:0, episode:8, cat_id:0, cat_name:chair
Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
  File <span class="s2">"main.py"</span>, line 259, <span class="k">in</span> &lt;module&gt;
    main<span class="o">()</span>
  File <span class="s2">"main.py"</span>, line 205, <span class="k">in </span>main
    obs, _, <span class="k">done</span>, infos, observations_habitat <span class="o">=</span> agent.step<span class="o">(</span>agent_input<span class="o">)</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/agent/unigoal/agent.py"</span>, line 404, <span class="k">in </span>step
    self.reset<span class="o">()</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/agent/unigoal/agent.py"</span>, line 89, <span class="k">in </span>reset
    self.envs.set_goal_cat_id<span class="o">(</span>idx<span class="o">)</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/envs/habitat/instanceimagegoal_env.py"</span>, line 264, <span class="k">in </span>set_goal_cat_id
    self.info[<span class="s1">'goal_name'</span><span class="o">]</span> <span class="o">=</span> self.index2name[idx]
KeyError: 6
</code></pre></div></div> <p>在agent.py 692行修改：</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="nf">if </span><span class="p">((</span><span class="n">ins_whwh</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="n">ins_whwh</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="n">self</span><span class="p">.</span><span class="n">instance_imagegoal</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> \
                    <span class="o">+</span><span class="p">((</span><span class="n">ins_whwh</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="n">ins_whwh</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span><span class="o">-</span><span class="n">self</span><span class="p">.</span><span class="n">instance_imagegoal</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">&lt;</span> \
                        <span class="p">((</span><span class="n">self</span><span class="p">.</span><span class="n">instance_imagegoal</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">/</span> <span class="mi">6</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="p">)</span><span class="o">*</span><span class="mi">2</span><span class="p">:</span>
                <span class="c1"># return int(ins_whwh[0][0])
</span>                <span class="n">cat_id</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">ins_whwh</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
                <span class="c1"># 添加有效性检查
</span>                <span class="k">if</span> <span class="n">cat_id</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">envs</span><span class="p">.</span><span class="n">index2name</span><span class="p">:</span>
                	<span class="k">return</span> <span class="n">cat_id</span>
        <span class="k">return</span> <span class="bp">None</span>
    <span class="bp">...</span>
</code></pre></div></div> <p>加入轮次选择 main.py</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>]]></content><author><name></name></author><category term="Experience"/><category term="Debug"/><category term="Deploy"/><summary type="html"><![CDATA[RoboTHOR]]></summary></entry><entry><title type="html">UniGoal</title><link href="https://son4ta.github.io/blog/2025/UniGoal/" rel="alternate" type="text/html" title="UniGoal"/><published>2025-04-25T14:32:13+00:00</published><updated>2025-04-25T14:32:13+00:00</updated><id>https://son4ta.github.io/blog/2025/UniGoal</id><content type="html" xml:base="https://son4ta.github.io/blog/2025/UniGoal/"><![CDATA[<h1 id="unigoal">UniGoal</h1> <p>在机器人导航领域，现有方法通常针对特定任务（如物体导航、图像导航或文本导航）设计独立框架，导致模型泛化能力受限且难以应对真实场景中复杂的多模态指令。为此，本研究提出UniGoal ——首个零样本学习的通用目标导航框架，通过统一的图表示与大语言模型（LLM）推理 ，实现了跨物体类别、图像和文本描述三类任务的零样本导航。其核心创新在于：（1）构建动态场景图与目标图的统一表示，将环境感知与目标描述转化为结构化图，保留丰富的空间与语义关系；（2）设计<a href="https://zhida.zhihu.com/search?content_id=255217302&amp;content_type=Article&amp;match_order=1&amp;q=多阶段探索策略&amp;zhida_source=entity">多阶段探索策略</a>，根据图匹配程度动态调整探索策略，在零匹配阶段通过子图分解逐步探索未知区域，部分匹配时利用坐标投影与锚点对齐推断目标位置，完全匹配时通过场景图修正与验证确保定位准确。此外，引入<a href="https://zhida.zhihu.com/search?content_id=255217302&amp;content_type=Article&amp;match_order=1&amp;q=黑名单机制&amp;zhida_source=entity">黑名单机制</a>避免重复探索失败区域，显著提升效率。</p> <p>UniGoal的推理流程以图匹配为核心，结合LLM的推理能力实现高效决策。在场景图构建中，实时融合RGB-D观测中的语义信息，形成拓扑结构。目标图则根据输入类型（物体类别、图像或文本）通过LLM/VLM处理生成，确保与场景图表示的一致性。实验表明，UniGoal在<a href="https://zhida.zhihu.com/search?content_id=255217302&amp;content_type=Article&amp;match_order=1&amp;q=MatterPort3D&amp;zhida_source=entity">MatterPort3D</a>、<a href="https://zhida.zhihu.com/search?content_id=255217302&amp;content_type=Article&amp;match_order=1&amp;q=HM3D&amp;zhida_source=entity">HM3D</a>等数据集上全面超越现有零样本的专用任务方法（如<a href="https://zhida.zhihu.com/search?content_id=255217302&amp;content_type=Article&amp;match_order=1&amp;q=Mod-IIN&amp;zhida_source=entity">Mod-IIN</a>[1]、SG-Nav[2]）及需训练的通用方法（如<a href="https://zhida.zhihu.com/search?content_id=255217302&amp;content_type=Article&amp;match_order=1&amp;q=GOAT&amp;zhida_source=entity">GOAT</a>[3]），在物体导航（成功率41.0%）、图像实例导航（成功率60.2%）和文本导航（成功率20.2%）任务中均达最优性能。其无需训练的特性与多模态通用性，为机器人在未知环境中的灵活导航提供了全新范式，拥有在真实场景落地的潜力。</p> <table> <tbody> <tr> <td>——[CVPR2025</td> <td>UniGoal：通用零样本目标导航，Navigate to Any Goal! - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/30973430092)</td> </tr> </tbody> </table> <h2 id="环境配置">环境配置</h2> <h3 id="一conda">一、Conda</h3> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PyTorch  2.5.1
Python  3.12<span class="o">(</span>ubuntu22.04<span class="o">)</span>
CUDA  12.4

git clone https://github.com/bagh2178/UniGoal.git
<span class="nb">cd </span>UniGoal
conda create <span class="nt">-n</span> unigoal <span class="nv">python</span><span class="o">==</span>3.8
<span class="c"># conda init</span>
conda activate unigoal

<span class="c"># AutoDL的学术加速</span>
<span class="nb">source</span> /etc/network_turbo
<span class="nb">unset </span>http_proxy <span class="o">&amp;&amp;</span> <span class="nb">unset </span>https_proxy
</code></pre></div></div> <h3 id="二habitat-sim-023----habitat-lab">二、Habitat-sim-0.2.3 &amp; Habitat-lab</h3> <p>请注意，这里的Python一定要是<code class="language-plaintext highlighter-rouge">==3.8</code></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda <span class="nb">install </span>habitat-sim<span class="o">==</span>0.2.3 <span class="nt">-c</span> conda-forge <span class="nt">-c</span> aihabitat
 withbullet headless <span class="nt">--override-channels</span>
pip <span class="nb">install</span> <span class="nt">-e</span> third_party/habitat-lab
</code></pre></div></div> <h3 id="三安装第三方包">三、安装第三方包</h3> <h4 id="1-lightglue-githubcomcvglightgluegit">1. <strong>LightGlue</strong> (<code class="language-plaintext highlighter-rouge">github.com/cvg/LightGlue.git</code>)</h4> <p>功能：一种基于深度学习的局部特征匹配算法，专为稀疏特征匹配设计。它通过自适应计算机制动态调整推理深度和特征点数量，显著提升了匹配效率和精度</p> <ul> <li>支持自省机制，可提前终止简单图像对的推理过程</li> <li>在3D重建、SLAM等对实时性要求高的场景中表现优异</li> </ul> <h4 id="2-detectron2-githubcomfacebookresearchdetectron2git">2. <strong>Detectron2</strong> (<code class="language-plaintext highlighter-rouge">github.com/facebookresearch/detectron2.git</code>)</h4> <p>功能：Meta开源的计算机视觉工具库，支持目标检测、实例分割、关键点检测等任务</p> <ul> <li>提供预训练模型如Faster R-CNN、Mask R-CNN等</li> <li>支持灵活的配置系统和分布式训练</li> </ul> <h4 id="3-grounded-segment-anything-idea-researchgrounded-segment-anything">3. <strong>Grounded-Segment-Anything</strong> (<code class="language-plaintext highlighter-rouge">IDEA-Research/Grounded-Segment-Anything</code>)</h4> <p>核心组件:</p> <ul> <li> <p><strong>Segment Anything (SAM)</strong></p> <p>功能：Meta提出的通用图像分割模型，支持零样本分割（无需预训练即可分割任意物体）</p> <p>模型文件：<code class="language-plaintext highlighter-rouge">sam_vit_h_4b8939.pth</code></p> <p>是其预训练权重，适用于高精度分割任务</p> </li> <li> <p><strong>GroundingDINO</strong></p> <p>功能：基于文本提示的零样本目标检测模型，可将自然语言描述与图像中的物体关联</p> <ul> <li><strong>模型文件</strong>：<code class="language-plaintext highlighter-rouge">groundingdino_swint_ogc.pth</code>是其预训练权重，支持如“检测戴帽子的人”等复杂语义查询</li> </ul> </li> </ul> <h4 id="4-依赖项与模型文件">4. <strong>依赖项与模型文件</strong></h4> <p><code class="language-plaintext highlighter-rouge">segment_anything</code>：SAM的PyTorch实现，提供图像分割基础功能</p> <p><code class="language-plaintext highlighter-rouge">GroundingDINO依赖</code>：包含文本-图像特征融合模块，支持多模态目标检测</p> <p>模型文件用途：</p> <ul> <li><code class="language-plaintext highlighter-rouge">sam_vit_h_4b8939.pth</code>：SAM的ViT-Huge模型权重，适合高精度分割。</li> <li><code class="language-plaintext highlighter-rouge">groundingdino_swint_ogc.pth</code>：GroundingDINO的Swin Transformer权重，支持文本引导检测。</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>git+https://github.com/cvg/LightGlue.git
pip <span class="nb">install </span>git+https://github.com/facebookresearch/detectron2.git <span class="c"># 请保证有足够的运行内存编译</span>
git clone https://github.com/IDEA-Research/Grounded-Segment-Anything.git third_party/Grounded-Segment-Anything
<span class="nb">cd </span>third_party/Grounded-Segment-Anything
git checkout 5cb813f <span class="c"># 会得到一个警告：分离头指针状态，不用理会</span>
pip <span class="nb">install</span> <span class="nt">-e</span> segment_anything
pip <span class="nb">install</span> <span class="nt">--no-build-isolation</span> <span class="nt">-e</span> GroundingDINO
<span class="nb">cd</span> ../../
<span class="nb">mkdir</span> <span class="nt">-p</span> data/models/  <span class="c"># -p 参数自动创建多级目录，这里原作者没搞，wget -O 参数指定的是完整文件路径，不会自动创建目录</span>
wget <span class="nt">-O</span> data/models/sam_vit_h_4b8939.pth https://dl.fbaipublicfiles.com/segment_anything/sam_vit_h_4b8939.pth
<span class="c"># data/models/sam_vit_h_4b 100%[=================================&gt;]   2.39G  13.5MB/s    in 3m 9s</span>

<span class="c"># source /etc/network_turbo 这里需要VPN ↓</span>
wget <span class="nt">-O</span> data/models/groundingdino_swint_ogc.pth https://github.com/IDEA-Research/GroundingDINO/releases/download/v0.1.0-alpha/groundingdino_swint_ogc.pth
<span class="c"># data/models/groundingdin 100%[=================================&gt;] 661.85M   121MB/s    in 5.5s</span>
</code></pre></div></div> <h3 id="四安装别的小东西">四、安装别的小东西</h3> <p><code class="language-plaintext highlighter-rouge">pytorch::faiss-gpu</code> 是 Meta AI 开发的 <strong>GPU 加速版 Faiss 库</strong>，专为大规模向量相似性搜索和聚类设计，可能和图搜索有关系</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda <span class="nb">install </span>pytorch::faiss-gpu
<span class="c"># 如果清华源抽风</span>
<span class="c"># conda install pytorch::faiss-gpu -c pytorch -c nvidia -c anaconda --override-channels</span>
pip <span class="nb">install</span> <span class="nt">-r</span> requirements.txt
</code></pre></div></div> <p>至此，环境配置完成。</p> <h2 id="数据集hm3d">数据集（HM3D）</h2> <h3 id="数据集下载">数据集下载</h3> <p>为了数据集组织正确，先创建文件夹：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir -p data/datasets/instance_imagenav/hm3d/v3/
mkdir -p data/scene_datasets/hm3d_v0.2/val/
</code></pre></div></div> <p>然后，下载两个压缩包：</p> <p>https://dl.fbaipublicfiles.com/habitat/data/datasets/imagenav/hm3d/v3/instance_imagenav_hm3d_v3.zip</p> <p>https://mp-app-prod.s3.amazonaws.com/habitat/v1.0/hm3d-val-habitat-v0.2.tar</p> <p>最后，对于<code class="language-plaintext highlighter-rouge">instance_imagenav_hm3d_v3.zip</code>，把<code class="language-plaintext highlighter-rouge">val</code>、<code class="language-plaintext highlighter-rouge">train</code>和<code class="language-plaintext highlighter-rouge">val_mini</code>复制到<code class="language-plaintext highlighter-rouge">data/datasets/instance_imagenav/hm3d/v3/</code>下面</p> <p>对于<code class="language-plaintext highlighter-rouge">hm3d-val-habitat-v0.2.tar</code>，一样操作</p> <p>注意，需要这么组织数据集，名字也要一模一样：</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>UniGoal/
└── data/
    ├── datasets/
    │   └── instance_imagenav/
    │       └── hm3d/
    │           └── v3/
    │               └── val/
    │                   ├── content/
    │                   │   ├── 4ok3usBNeis.json.gz
    │                   │   ├── 5cdEh9F2hJL.json.gz
    │                   │   ├── ...
    │                   │   └── zt1RVoi7PcG.json.gz
    │                   └── val.json.gz
    └── scene_datasets/
        └── hm3d_v0.2/
            └── val/
                ├── 00800-TEEsavR23oF/
                │   ├── TEEsavR23oF.basis.glb
                │   └── TEEsavR23oF.basis.navmesh
                ├── 00801-HaxA7YrQdEC/
                ├── ...
                └── 00899-58NLZxWBSpk/
</code></pre></div></div> <h2 id="llm-and-vlm"><strong>LLM and VLM</strong></h2> <p>Option 1: Install Ollama.【我们这里使用这个选项】</p> <p><a href="https://ollama.readthedocs.io/linux/#ollama">Linux 文档 - Ollama 中文文档</a></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># source /etc/network_turbo</span>
<span class="nb">export </span><span class="nv">OLLAMA_MODELS</span><span class="o">=</span>/root/autodl-tmp/ollama_models
<span class="nb">echo</span> <span class="s1">'export OLLAMA_MODELS=/root/autodl-tmp/ollama_models'</span> <span class="o">&gt;&gt;</span> ~/.bashrc
<span class="nb">source</span> ~/.bashrc
<span class="nb">sudo mkdir</span> <span class="nt">-p</span> ~/autodl-tmp/ollama_models

<span class="c"># Environment="OLLAMA_MODELS=/root/autodl-tmp/ollama_models"</span>
<span class="c"># sudo vim /etc/systemd/system/ollama.service</span>

curl <span class="nt">-fsSL</span> https://ollama.com/install.sh | sh
<span class="c"># 不用理会：</span>
<span class="c"># WARNING: systemd is not running</span>
<span class="c"># WARNING: Unable to detect NVIDIA/AMD GPU. Install lspci or lshw to automatically detect and install GPU dependencies.</span>
<span class="c"># 如果你没有GPU的情况下，ollama会自行关闭，需要重新启动</span>
ollama serve &amp;

ollama pull llama3.2-vision
<span class="c"># ollama支持中断继续下载，放心Kill</span>
<span class="nb">export </span><span class="nv">HF_ENDPOINT</span><span class="o">=</span>https://hf-mirror.com
</code></pre></div></div> <p><img src="S:\Programming\Son4ta.github.io\Son4ta.github.io\assets\img\image-20250425170952781.png" alt="image-20250425170952781"/></p> <p>Option 2: Use LLM and VLM via your own API. Change the <code class="language-plaintext highlighter-rouge">llm_model</code>, <code class="language-plaintext highlighter-rouge">vlm_model</code>, <code class="language-plaintext highlighter-rouge">api_key</code>, <code class="language-plaintext highlighter-rouge">base_url</code> in the configuration file <code class="language-plaintext highlighter-rouge">configs/config_habitat.yaml</code> to your own.</p> <h2 id="evaluation">Evaluation</h2> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ollama serve &amp; <span class="c"># 如果没启动</span>
<span class="nb">nohup </span>ollama serve &amp; <span class="c"># 这会启动Ollama后台服务。保持此终端运行或使用nohup将其置于后台</span>
netstat <span class="nt">-tuln</span> | <span class="nb">grep </span>11434 <span class="c"># 运行以下命令查看11434端口是否被监听</span>

<span class="nv">CUDA_VISIBLE_DEVICES</span><span class="o">=</span>0 python main.py  <span class="c"># instance-image-goal</span>

<span class="c"># 首次运行huggingface会出问题</span>

<span class="nb">export </span><span class="nv">HF_ENDPOINT</span><span class="o">=</span>https://hf-mirror.com

OSError: We couldn<span class="s1">'t connect to '</span>https://huggingface.co<span class="s1">' to load this file, couldn'</span>t find it <span class="k">in </span>the cached files and it looks like bert-base-uncased is not the path to a directory containing a file named config.json.
Checkout your internet connection or see how to run the library <span class="k">in </span>offline mode at <span class="s1">'https://huggingface.co/docs/transformers/installation#offline-mode'</span><span class="nb">.</span>

</code></pre></div></div> <h2 id="debug">DeBug</h2> <p>报错<code class="language-plaintext highlighter-rouge">ImportError: libEGL.so.1: cannot open shared object file: No such file or directory</code></p> <p>觉得眼熟？ImportError正在全世界发生！</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    import habitat_sim
  File <span class="s2">"/root/miniconda3/envs/unigoal/lib/python3.8/site-packages/habitat_sim-0.2.3-py3.8-linux-x86_64.egg/habitat_sim/__init__.py"</span>, line 13, <span class="k">in</span> &lt;module&gt;
    import habitat_sim._ext.habitat_sim_bindings
ImportError: libEGL.so.1: cannot open shared object file: No such file or directory
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install </span>libegl1 mesa-utils libgl1-mesa-glx
</code></pre></div></div> <p>报错<code class="language-plaintext highlighter-rouge">ModuleNotFoundError: No module named 'openai'</code></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
  File <span class="s2">"main.py"</span>, line 15, <span class="k">in</span> &lt;module&gt;
    from src.graph.graph import Graph
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/graph.py"</span>, line 9, <span class="k">in</span> &lt;module&gt;
    from openai import OpenAI
ModuleNotFoundError: No module named <span class="s1">'openai'</span>
</code></pre></div></div> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>openai
</code></pre></div></div> <p>报错<code class="language-plaintext highlighter-rouge">ImportError: libmkl_intel_lp64.so.1: cannot open shared object file: No such file or directory</code></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
  File <span class="s2">"main.py"</span>, line 15, <span class="k">in</span> &lt;module&gt;
    from src.graph.graph import Graph
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/graph.py"</span>, line 28, <span class="k">in</span> &lt;module&gt;
    from .utils.utils import filter_objects, gobs_to_detection_list
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/utils/utils.py"</span>, line 7, <span class="k">in</span> &lt;module&gt;
    import faiss
  File <span class="s2">"/root/miniconda3/envs/unigoal/lib/python3.8/site-packages/faiss/__init__.py"</span>, line 16, <span class="k">in</span> &lt;module&gt;
    from .loader import <span class="k">*</span>
  File <span class="s2">"/root/miniconda3/envs/unigoal/lib/python3.8/site-packages/faiss/loader.py"</span>, line 65, <span class="k">in</span> &lt;module&gt;
    from .swigfaiss import <span class="k">*</span>
  File <span class="s2">"/root/miniconda3/envs/unigoal/lib/python3.8/site-packages/faiss/swigfaiss.py"</span>, line 13, <span class="k">in</span> &lt;module&gt;
    from <span class="nb">.</span> import _swigfaiss
ImportError: libmkl_intel_lp64.so.1: cannot open shared object file: No such file or directory
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda <span class="nb">install </span><span class="nv">mkl</span><span class="o">=</span>2021 
</code></pre></div></div> <p>报错<code class="language-plaintext highlighter-rouge">ImportError: libmkl_intel_lp64.so.1: cannot open shared object file: No such file or directory</code></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>num timesteps 0, episode_idx 0
update_observation 6...
    mapping3d...
        compute_spatial_similarities...
Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
  File <span class="s2">"main.py"</span>, line 259, <span class="k">in</span> &lt;module&gt;
    main<span class="o">()</span>
  File <span class="s2">"main.py"</span>, line 151, <span class="k">in </span>main
    graph.update_scenegraph<span class="o">()</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/graph.py"</span>, line 716, <span class="k">in </span>update_scenegraph
    self.mapping3d<span class="o">()</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/graph.py"</span>, line 524, <span class="k">in </span>mapping3d
    spatial_sim <span class="o">=</span> compute_spatial_similarities<span class="o">(</span>self.cfg, fg_detection_list, self.objects<span class="o">)</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/utils/mapping.py"</span>, line 21, <span class="k">in </span>compute_spatial_similarities
    spatial_sim <span class="o">=</span> compute_overlap_matrix_2set<span class="o">(</span>cfg, objects, detection_list<span class="o">)</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/utils/utils.py"</span>, line 331, <span class="k">in </span>compute_overlap_matrix_2set
    iou <span class="o">=</span> compute_3d_iou_accuracte_batch<span class="o">(</span>bbox_map, bbox_new<span class="o">)</span> <span class="c"># (m, n)</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/utils/iou.py"</span>, line 58, <span class="k">in </span>compute_3d_iou_accuracte_batch
    import pytorch3d.ops as ops
ModuleNotFoundError: No module named <span class="s1">'pytorch3d'</span>

</code></pre></div></div> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install</span> <span class="s2">"git+https://github.com/facebookresearch/pytorch3d.git"</span> <span class="nt">-v</span> <span class="p">;</span> /usr/bin/shutdown  
<span class="c"># 一定要从从源码安装，不然很逆天</span>
<span class="c"># 会一堆警告，不用管，没停就是正常</span>
<span class="c"># 要在有GPU的环境下（如果你是租用平台，就得开着GPU）</span>
<span class="c"># 20分钟左右（实测23:44到00:07）</span>
</code></pre></div></div> <p>报错：graph.py 的<code class="language-plaintext highlighter-rouge">878</code>和<code class="language-plaintext highlighter-rouge">903</code>行 <code class="language-plaintext highlighter-rouge">AttributeError: 'numpy.ndarray' object has no attribute 'cpu'</code></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
  File <span class="s2">"main.py"</span>, line 259, <span class="k">in</span> &lt;module&gt;
    main<span class="o">()</span>
  File <span class="s2">"main.py"</span>, line 166, <span class="k">in </span>main
    goal <span class="o">=</span> graph.explore<span class="o">()</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/graph.py"</span>, line 732, <span class="k">in </span>explore
    goal <span class="o">=</span> self.get_goal<span class="o">(</span>goal<span class="o">)</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/graph.py"</span>, line 903, <span class="k">in </span>get_goal
    frontier_locations <span class="o">=</span> frontier_locations.cpu<span class="o">()</span>.numpy<span class="o">()</span>
AttributeError: <span class="s1">'numpy.ndarray'</span> object has no attribute <span class="s1">'cpu'</span>
</code></pre></div></div> <p>修改<code class="language-plaintext highlighter-rouge">/root/autodl-tmp/UniGoal/src/graph/graph.py</code>的<code class="language-plaintext highlighter-rouge">878</code>和<code class="language-plaintext highlighter-rouge">903</code>行：</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># frontier_locations = frontier_locations.cpu().numpy()
</span><span class="n">frontier_locations</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">tensor</span><span class="p">(</span><span class="n">frontier_locations</span><span class="p">).</span><span class="nf">cpu</span><span class="p">().</span><span class="nf">numpy</span><span class="p">()</span>
</code></pre></div></div> <p>报错：graph.py <code class="language-plaintext highlighter-rouge">get_goal(goal)</code> <code class="language-plaintext highlighter-rouge">917</code> 行<code class="language-plaintext highlighter-rouge">AttributeError: 'numpy.ndarray' object has no attribute 'cpu'</code></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    goal <span class="o">=</span> graph.explore<span class="o">()</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/graph.py"</span>, line 732, <span class="k">in </span>explore
    goal <span class="o">=</span> self.get_goal<span class="o">(</span>goal<span class="o">)</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/graph/graph.py"</span>, line 917, <span class="k">in </span>get_goal
    scores +<span class="o">=</span> distances_16_inverse
ValueError: operands could not be broadcast together with shapes <span class="o">(</span>1016,<span class="o">)</span> <span class="o">(</span>934,<span class="o">)</span> <span class="o">(</span>1016,<span class="o">)</span>
</code></pre></div></div> <p>全面修改<code class="language-plaintext highlighter-rouge">get_goal(goal)</code> 函数：</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_goal</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">goal</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="n">fbe_map</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">zeros_like</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">full_map</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">])</span>
    <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">full_map</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">fbe_map</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">fbe_free_map</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1"># first free 
</span>        <span class="k">else</span><span class="p">:</span>
            <span class="n">fbe_map</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">full_map</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1"># first free 
</span>            <span class="n">fbe_map</span><span class="p">[</span><span class="n">skimage</span><span class="p">.</span><span class="n">morphology</span><span class="p">.</span><span class="nf">binary_dilation</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">full_map</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">cpu</span><span class="p">().</span><span class="nf">numpy</span><span class="p">(),</span> <span class="n">skimage</span><span class="p">.</span><span class="n">morphology</span><span class="p">.</span><span class="nf">disk</span><span class="p">(</span><span class="mi">4</span><span class="p">))]</span> <span class="o">=</span> <span class="mi">3</span>  <span class="c1"># dilate obstacle
</span>
            <span class="n">fbe_cp</span> <span class="o">=</span> <span class="n">copy</span><span class="p">.</span><span class="nf">deepcopy</span><span class="p">(</span><span class="n">fbe_map</span><span class="p">)</span>
            <span class="n">fbe_cpp</span> <span class="o">=</span> <span class="n">copy</span><span class="p">.</span><span class="nf">deepcopy</span><span class="p">(</span><span class="n">fbe_map</span><span class="p">)</span>
            <span class="n">fbe_cp</span><span class="p">[</span><span class="n">fbe_cp</span><span class="o">==</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span>  <span class="c1"># unknown space
</span>            <span class="n">fbe_cp</span><span class="p">[</span><span class="n">fbe_cp</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># free and obstacle
</span>            <span class="n">selem</span> <span class="o">=</span> <span class="n">skimage</span><span class="p">.</span><span class="n">morphology</span><span class="p">.</span><span class="nf">disk</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
            <span class="n">fbe_cpp</span><span class="p">[</span><span class="n">skimage</span><span class="p">.</span><span class="n">morphology</span><span class="p">.</span><span class="nf">binary_dilation</span><span class="p">(</span><span class="n">fbe_cp</span><span class="p">.</span><span class="nf">cpu</span><span class="p">().</span><span class="nf">numpy</span><span class="p">(),</span> <span class="n">selem</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># dilate unknown space
</span>
            <span class="n">diff</span> <span class="o">=</span> <span class="n">fbe_map</span> <span class="o">-</span> <span class="n">fbe_cpp</span>  <span class="c1"># frontier area
</span>            <span class="n">frontier_map</span> <span class="o">=</span> <span class="n">diff</span> <span class="o">==</span> <span class="mi">1</span>
            <span class="n">frontier_map</span> <span class="o">=</span> <span class="n">frontier_map</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">num_of_goal</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">).</span><span class="nf">to</span><span class="p">(</span><span class="n">frontier_map</span><span class="p">.</span><span class="n">device</span><span class="p">)</span>
            <span class="n">frontier_locations</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">stack</span><span class="p">([</span><span class="n">torch</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="n">frontier_map</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span> <span class="n">torch</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="n">frontier_map</span><span class="p">)[</span><span class="mi">1</span><span class="p">]]).</span><span class="n">T</span>
            <span class="n">num_frontiers</span> <span class="o">=</span> <span class="n">frontier_locations</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">num_frontiers</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">None</span>

            <span class="c1"># 统一使用初始前沿位置计算 --------------------------------------------------
</span>            <span class="n">input_pose</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
            <span class="n">input_pose</span><span class="p">[:</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">full_pose</span><span class="p">.</span><span class="nf">cpu</span><span class="p">().</span><span class="nf">numpy</span><span class="p">()</span>
            <span class="n">input_pose</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">map_size_cm</span><span class="o">/</span><span class="mi">100</span> <span class="o">-</span> <span class="n">input_pose</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">input_pose</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="n">input_pose</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
            <span class="n">input_pose</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">full_map</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
            <span class="n">input_pose</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">full_map</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">traversible</span><span class="p">,</span> <span class="n">start</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">get_traversible</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">full_map</span><span class="p">.</span><span class="nf">cpu</span><span class="p">().</span><span class="nf">numpy</span><span class="p">()[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">::</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">input_pose</span><span class="p">)</span>

            <span class="c1"># 初始距离计算
</span>            <span class="n">planner</span> <span class="o">=</span> <span class="nc">FMMPlanner</span><span class="p">(</span><span class="n">traversible</span><span class="p">)</span>
            <span class="n">state</span> <span class="o">=</span> <span class="p">[</span><span class="n">start</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">start</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
            <span class="n">planner</span><span class="p">.</span><span class="nf">set_goal</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
            <span class="n">fmm_dist</span> <span class="o">=</span> <span class="n">planner</span><span class="p">.</span><span class="n">fmm_dist</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

            <span class="c1"># 统一将前沿位置转换为numpy并计算初始距离
</span>            <span class="n">frontier_locations_np</span> <span class="o">=</span> <span class="n">frontier_locations</span><span class="p">.</span><span class="nf">cpu</span><span class="p">().</span><span class="nf">numpy</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span>  <span class="c1"># 加1补偿坐标偏移
</span>            <span class="n">distances</span> <span class="o">=</span> <span class="n">fmm_dist</span><span class="p">[</span><span class="n">frontier_locations_np</span><span class="p">[:,</span><span class="mi">0</span><span class="p">],</span> <span class="n">frontier_locations_np</span><span class="p">[:,</span><span class="mi">1</span><span class="p">]]</span> <span class="o">/</span> <span class="mi">20</span>

            <span class="c1"># 初始前沿筛选
</span>            <span class="n">distance_threshold</span> <span class="o">=</span> <span class="mi">3</span>
            <span class="n">valid_mask</span> <span class="o">=</span> <span class="n">distances</span> <span class="o">&gt;=</span> <span class="n">distance_threshold</span>
            <span class="n">valid_distances</span> <span class="o">=</span> <span class="n">distances</span><span class="p">[</span><span class="n">valid_mask</span><span class="p">]</span>
            <span class="n">valid_locations</span> <span class="o">=</span> <span class="n">frontier_locations_np</span><span class="p">[</span><span class="n">valid_mask</span><span class="p">]</span>  <span class="c1"># 保存有效前沿位置
</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">valid_distances</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">None</span>

            <span class="c1"># 初始化scores
</span>            <span class="n">scores</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">-</span> <span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">clip</span><span class="p">(</span><span class="n">valid_distances</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">distance_threshold</span><span class="p">)</span> <span class="o">-</span> <span class="n">distance_threshold</span><span class="p">)</span>

            <span class="c1"># 处理传入的goal时使用同一组前沿位置 ----------------------------------------
</span>            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">goal</span><span class="p">,</span> <span class="p">(</span><span class="nb">list</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">)):</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="c1"># 使用已筛选的有效前沿计算新距离
</span>                    <span class="n">planner_goal</span> <span class="o">=</span> <span class="nc">FMMPlanner</span><span class="p">(</span><span class="n">traversible</span><span class="p">)</span>
                    <span class="n">state_goal</span> <span class="o">=</span> <span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">goal</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">goal</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
                    <span class="n">planner_goal</span><span class="p">.</span><span class="nf">set_goal</span><span class="p">(</span><span class="n">state_goal</span><span class="p">)</span>
                    <span class="n">fmm_dist_goal</span> <span class="o">=</span> <span class="n">planner_goal</span><span class="p">.</span><span class="n">fmm_dist</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

                    <span class="c1"># 直接使用valid_locations计算距离
</span>                    <span class="n">goal_distances</span> <span class="o">=</span> <span class="n">fmm_dist_goal</span><span class="p">[</span><span class="n">valid_locations</span><span class="p">[:,</span><span class="mi">0</span><span class="p">],</span> <span class="n">valid_locations</span><span class="p">[:,</span><span class="mi">1</span><span class="p">]]</span> <span class="o">/</span> <span class="mi">20</span>
                    <span class="n">goal_scores</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">clip</span><span class="p">(</span><span class="n">goal_distances</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">distance_threshold</span><span class="p">)</span> <span class="o">-</span> <span class="n">distance_threshold</span><span class="p">)</span><span class="o">/</span><span class="mi">10</span>
                    <span class="n">scores</span> <span class="o">+=</span> <span class="n">goal_scores</span>  <span class="c1"># 保证形状一致
</span>
                    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Goal processing error: </span><span class="si">{</span><span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

                        <span class="c1"># 最终目标选择
</span>                        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                            <span class="k">return</span> <span class="bp">None</span>
                        <span class="n">best_idx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
                        <span class="n">final_goal</span> <span class="o">=</span> <span class="n">valid_locations</span><span class="p">[</span><span class="n">best_idx</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span>  <span class="c1"># 补偿坐标偏移
</span>                        <span class="k">return</span> <span class="n">final_goal</span>
</code></pre></div></div> <p>KeyError: 6</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rank:0, episode:8, cat_id:0, cat_name:chair
Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
  File <span class="s2">"main.py"</span>, line 259, <span class="k">in</span> &lt;module&gt;
    main<span class="o">()</span>
  File <span class="s2">"main.py"</span>, line 205, <span class="k">in </span>main
    obs, _, <span class="k">done</span>, infos, observations_habitat <span class="o">=</span> agent.step<span class="o">(</span>agent_input<span class="o">)</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/agent/unigoal/agent.py"</span>, line 404, <span class="k">in </span>step
    self.reset<span class="o">()</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/agent/unigoal/agent.py"</span>, line 89, <span class="k">in </span>reset
    self.envs.set_goal_cat_id<span class="o">(</span>idx<span class="o">)</span>
  File <span class="s2">"/root/autodl-tmp/UniGoal/src/envs/habitat/instanceimagegoal_env.py"</span>, line 264, <span class="k">in </span>set_goal_cat_id
    self.info[<span class="s1">'goal_name'</span><span class="o">]</span> <span class="o">=</span> self.index2name[idx]
KeyError: 6
</code></pre></div></div> <p>在agent.py 692行修改：</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="nf">if </span><span class="p">((</span><span class="n">ins_whwh</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="n">ins_whwh</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="n">self</span><span class="p">.</span><span class="n">instance_imagegoal</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> \
                    <span class="o">+</span><span class="p">((</span><span class="n">ins_whwh</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="n">ins_whwh</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span><span class="o">-</span><span class="n">self</span><span class="p">.</span><span class="n">instance_imagegoal</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">&lt;</span> \
                        <span class="p">((</span><span class="n">self</span><span class="p">.</span><span class="n">instance_imagegoal</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">/</span> <span class="mi">6</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="p">)</span><span class="o">*</span><span class="mi">2</span><span class="p">:</span>
                <span class="c1"># return int(ins_whwh[0][0])
</span>                <span class="n">cat_id</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">ins_whwh</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
                <span class="c1"># 添加有效性检查
</span>                <span class="k">if</span> <span class="n">cat_id</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">envs</span><span class="p">.</span><span class="n">index2name</span><span class="p">:</span>
                	<span class="k">return</span> <span class="n">cat_id</span>
        <span class="k">return</span> <span class="bp">None</span>
    <span class="bp">...</span>
</code></pre></div></div> <p>加入轮次选择 main.py</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>]]></content><author><name></name></author><category term="Experience"/><category term="Debug"/><category term="Deploy"/><summary type="html"><![CDATA[服务器下复现UniGoal]]></summary></entry><entry><title type="html">AutoDL最佳实践</title><link href="https://son4ta.github.io/blog/2025/1-autoDL/" rel="alternate" type="text/html" title="AutoDL最佳实践"/><published>2025-04-19T14:32:13+00:00</published><updated>2025-04-19T14:32:13+00:00</updated><id>https://son4ta.github.io/blog/2025/1-autoDL</id><content type="html" xml:base="https://son4ta.github.io/blog/2025/1-autoDL/"><![CDATA[<h1 id="autodl最佳实践">AutoDL最佳实践</h1> <p>因为课题需要，我展开了对AutoDL和<a href="https://gpushare.com/">恒源云</a>平台的试用，恒源云请一定要<a href="https://gpushare.com/center/account/student">学生认证</a>一下</p> <p><a href="https://www.autodl.com/docs">AutoDL文档</a></p> <h2 id="开始">开始</h2> <h2 id="克隆实例">克隆实例</h2> <p>在使用时发现，你租用的实例只有在<strong>同一台服务器</strong>（一般有8-10个GPU）有空闲的时候，你才能开机。</p> <p><strong>是刚好！在！同一个服务器的！可怜的8-10张显卡！有！空！闲！</strong></p> <p>完全不是人，伟大的AutoDL降临了伟大的<strong>克隆实例</strong>功能，可以完全克隆，克隆实例可以把系统和数据盘的东西克隆到同区</p> <p><img src="S:\Programming\Son4ta.github.io\Son4ta.github.io\assets\img\image-20250420155046472.png" alt="image-20250420155046472" style="zoom:75%;"/></p> <p>[^伟大，无需多言，但是一天只有三次，别带滔博节奏]:</p> <h2 id="跨实例复制">跨实例复制</h2> <p>有人就要问了，主播主播，克隆实例虽然好用，但是就一天三次机会，万一克隆完还是被占了，还是太吃操作了。</p> <p>在实际使用中，你的一堆实例真是不知道哪个能用，六冠王<strong>跨实例复制</strong>来了！</p> <p><img src="S:\Programming\Son4ta.github.io\Son4ta.github.io\assets\img\image-20250420155813515.png" alt="image-20250420155813515"/></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ubuntu:/etc/docker<span class="nv">$ </span><span class="nb">sudo rm </span>daemon.json 
</code></pre></div></div> <p>启动docker</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> systemctl start docker
</code></pre></div></div> <p>因为正常执行build大概率会因为网络问题翻车</p> <p>所以先安装</p> <p>[ERROR <a href="https://github.com/ifzhang/ByteTrack/issues/189">internal] load metadata for nvcr.io/nvidia/tensorrt:21.09-py3 · Issue #189 · ifzhang/ByteTrack (github.com)</a></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull nvcr.io/nvidia/pytorch:21.09-py3 -–registry-mirror<span class="o">=</span>https://mirror.iscas.ac.cn<span class="o">(</span>国内镜像源地址<span class="o">)</span>
</code></pre></div></div> <p>启动docker</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>torchrun --standalone --nnodes 1 --nproc-per-node 1 vla-scripts/finetune.py \
  --vla_path openvla/openvla-7b \
  --data_root_dir /root/autodl-tmp/openvla/dataset/ \
  --dataset_name libero_goal_no_noops \
  --run_root_dir /root/autodl-tmp/openvla/log/ \
  --use_l1_regression True \
  --use_diffusion False \
  --use_film False \
  --num_images_in_input 2 \
  --use_proprio True \
  --batch_size 8 \
  --learning_rate 5e-4 \
  --num_steps_before_decay 100000 \
  --max_steps 150005 \
  --save_freq 10000 \
  --save_latest_checkpoint_only False \
  --image_aug True \
  --lora_rank 32 \
  --wandb_entity "UCAS" \
  --wandb_project "VLN"
  
  
usage: finetune.py [-h] [--config_path str] [--vla_path str]
                   [--data_root_dir str] [--dataset_name str]
                   [--run_root_dir str] [--adapter_tmp_dir str]
                   [--batch_size str] [--max_steps str] [--save_steps str]
                   [--learning_rate str] [--grad_accumulation_steps str]
                   [--image_aug str] [--shuffle_buffer_size str]
                   [--save_latest_checkpoint_only str] [--use_lora str]
                   [--lora_rank str] [--lora_dropout str]
                   [--use_quantization str] [--wandb_project str]
                   [--wandb_entity str] [--run_id_note str]

  
torchrun --standalone --nnodes 1 --nproc-per-node 1 vla-scripts/finetune.py \
  --vla_path /root/autodl-tmp/openvla/openvla-7b \
  --data_root_dir /root/autodl-tmp/openvla/dataset/modified_libero_rlds/ \
  --dataset_name libero_object_no_noops \
  --run_root_dir /root/autodl-tmp/openvla/log/ \
  --adapter_tmp_dir /root/autodl-tmp/openvla/log/ \
  --lora_rank 32 \
  --batch_size 2 \
  --grad_accumulation_steps 1 \
  --learning_rate 2.5e-4 \
  --image_aug True \
  --wandb_project "UCAS" \
  --wandb_entity "UCAS" \
  --save_steps 5000 \
  --max_steps 30000 \
  --save_latest_checkpoint_only true; /usr/bin/shutdown 
  
  torchrun --standalone --nnodes 1 --nproc-per-node 1 vla-scripts/finetune.py \
  --vla_path ./weight/openvla-7b \
  --data_root_dir ../modified_libero_rlds/ \
  --dataset_name libero_goal_no_noops \
  --run_root_dir ./log \
  --use_l1_regression True \
  --use_diffusion False \
  --use_film False \
  --num_images_in_input 2 \
  --use_proprio True \
  --batch_size 4 \
  --learning_rate 5e-4 \
  --num_steps_before_decay 100000 \
  --max_steps 150005 \
  --save_freq 10000 \
  --save_latest_checkpoint_only True \
  --image_aug True \
  --lora_rank 32

</code></pre></div></div>]]></content><author><name></name></author><category term="Experience"/><category term="Debug"/><category term="Deploy"/><summary type="html"><![CDATA[AutoDL最佳实践]]></summary></entry><entry><title type="html">服务器使用——Tmux 保活进程</title><link href="https://son4ta.github.io/blog/2025/how-to-write-a-blog/" rel="alternate" type="text/html" title="服务器使用——Tmux 保活进程"/><published>2025-01-12T17:56:13+00:00</published><updated>2025-01-12T17:56:13+00:00</updated><id>https://son4ta.github.io/blog/2025/how-to-write-a-blog</id><content type="html" xml:base="https://son4ta.github.io/blog/2025/how-to-write-a-blog/"><![CDATA[<p>我叼，我练了一半你跟我说进程挂了，忍不了</p> <h2 id="tmux">Tmux?</h2> <p>命令行的典型使用方式是，打开一个终端窗口（terminal window，以下简称”窗口”），在里面输入命令。用户与计算机的这种临时的交互，称为一次”会话”（session） 。</p> <p>会话的一个重要特点是，窗口与其中启动的进程是连在一起的。打开窗口，会话开始；关闭窗口，会话结束，会话内部的进程也会随之终止，不管有没有运行完。</p> <p>一个典型的例子就是，SSH 登录远程计算机，打开一个远程窗口执行命令。这时，网络突然断线，再次登录的时候，是找不回上一次执行的命令的。因为上一次 SSH 会话已经终止了，里面的进程也随之消失了。</p> <p>为了解决这个问题，会话与窗口可以”解绑”：窗口关闭时，会话并不终止，而是继续运行，等到以后需要的时候，再让会话”绑定”其他窗口。 Tmux 就是会话与窗口的”解绑”工具，将它们彻底分离。</p> <p>（1）它允许在单个窗口中，同时访问多个会话。这对于同时运行多个命令行程序很有用。</p> <p>（2） 它可以让新窗口”接入”已经存在的会话。</p> <p>（3）它允许每个会话有多个连接窗口，因此可以多人实时共享会话。</p> <p>（4）它还支持窗口任意的垂直和水平拆分。</p> <h2 id="使用">使用</h2> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 新建会话</span>
tmux new <span class="nt">-s</span> &lt;session-name&gt;
<span class="c"># 接入会话</span>
tmux attach <span class="nt">-t</span> 0 <span class="c"># 编号</span>
tmux attach <span class="nt">-t</span> &lt;session-name&gt; <span class="c"># 名称</span>
<span class="c"># 分离会话</span>
Ctrl+b d <span class="c"># 分开按 记得松手</span>
tmux detach
<span class="c"># 杀死某个会话</span>
tmux kill-session <span class="nt">-t</span> &lt;session-name&gt; <span class="c"># 名称 也可编号</span>
<span class="c"># 重命名会话</span>
tmux rename-session <span class="nt">-t</span> 0 &lt;new-name&gt;
</code></pre></div></div> <h2 id="最简操作流程">最简操作流程</h2> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 新建会话 </span>
tmux new <span class="nt">-s</span> my_session。
<span class="c"># 在 Tmux 窗口运行所需的程序。</span>
Ctrl+b d <span class="c">#会话分离。</span>
<span class="c"># 下次使用时，重新连接到会话</span>
tmux attach-session <span class="nt">-t</span> my_session
tmux attach <span class="c"># 只有一个会话，也行</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Experience"/><category term="Remote"/><category term="Desktop"/><category term="Ubuntu"/><category term="Server"/><summary type="html"><![CDATA[ssh连接偶遇网络问题，丢包之高恐怖如斯，拼尽全力仍无法重连训练中断]]></summary></entry><entry><title type="html">怎么和别人和谐共处的使用服务器上的GPU</title><link href="https://son4ta.github.io/blog/2025/A800/" rel="alternate" type="text/html" title="怎么和别人和谐共处的使用服务器上的GPU"/><published>2025-01-05T15:56:13+00:00</published><updated>2025-01-05T15:56:13+00:00</updated><id>https://son4ta.github.io/blog/2025/A800</id><content type="html" xml:base="https://son4ta.github.io/blog/2025/A800/"><![CDATA[<p>师兄协调了一台服务器，给了我个Ubuntu账户，我应该怎么用而不打扰别人？</p> <h2 id="怎么只有一个符号">怎么只有一个＄符号？</h2> <p>那是因为你正在用<code class="language-plaintext highlighter-rouge">.sh</code>模式，只要在终端输入<code class="language-plaintext highlighter-rouge">bash</code>，你所热爱的正是你的生活。</p> <h2 id="环境变量">环境变量</h2> <p>请只修改你目录下的东西，因为你没有sudo权限不太可能会动到/etc/..底下的东西，但是千万记住，不要直接修改 <code class="language-plaintext highlighter-rouge">/etc/profile</code>、<code class="language-plaintext highlighter-rouge">/etc/bashrc</code> 或其他全局的环境变量配置文件，因为这会影响所有用户。 你只能碰<code class="language-plaintext highlighter-rouge">/home/username/..</code>里面的<code class="language-plaintext highlighter-rouge">profile</code>、<code class="language-plaintext highlighter-rouge">bashrc</code>。 请注意，安装<code class="language-plaintext highlighter-rouge">Anaconda</code>没事，<code class="language-plaintext highlighter-rouge">CUDA</code>小心一点，有点麻烦。</p> <h2 id="cuda">CUDA</h2> <p>这里同样你只能用师兄们给你装好的圣遗物 请创建文件<code class="language-plaintext highlighter-rouge">touch switch-cuda.sh</code> 通过<code class="language-plaintext highlighter-rouge">source switch-cuda.sh</code>看可用的cuda，通过<code class="language-plaintext highlighter-rouge">source switch-cuda.sh [VERSION]</code>切换，例如：</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>base<span class="o">)</span> user@root:~<span class="nv">$ </span><span class="nb">source </span>switch-cuda.sh 
The following CUDA installations have been found <span class="o">(</span><span class="k">in</span> <span class="s1">'/usr/local'</span><span class="o">)</span>:
<span class="k">*</span> cuda-11.0
<span class="k">*</span> cuda-12.4

<span class="o">(</span>base<span class="o">)</span> user@root:~<span class="nv">$ </span><span class="nb">source </span>switch-cuda.sh 12.4
Switched to CUDA 12.4
</code></pre></div></div> <p>文件内容（用Vim编辑）：</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>

<span class="nb">set</span> <span class="nt">-e</span>
<span class="c"># ensure that the script has been sourced rather than just executed</span>
<span class="k">if</span> <span class="o">[[</span> <span class="s2">"</span><span class="k">${</span><span class="nv">BASH_SOURCE</span><span class="p">[0]</span><span class="k">}</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"</span><span class="k">${</span><span class="nv">0</span><span class="k">}</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"Please use 'source' to execute switch-cuda.sh!"</span>
    <span class="nb">exit </span>1
<span class="k">fi

</span><span class="nv">INSTALL_FOLDER</span><span class="o">=</span><span class="s2">"/usr/local"</span>  <span class="c"># the location to look for CUDA installations at</span>
<span class="nv">TARGET_VERSION</span><span class="o">=</span><span class="k">${</span><span class="nv">1</span><span class="k">}</span>          <span class="c"># the target CUDA version to switch to (if provided)</span>

<span class="c"># if no version to switch to has been provided, then just print all available CUDA installations</span>
<span class="k">if</span> <span class="o">[[</span> <span class="nt">-z</span> <span class="k">${</span><span class="nv">TARGET_VERSION</span><span class="k">}</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"The following CUDA installations have been found (in '</span><span class="k">${</span><span class="nv">INSTALL_FOLDER</span><span class="k">}</span><span class="s2">'):"</span>
    <span class="nb">ls</span> <span class="nt">-l</span> <span class="s2">"</span><span class="k">${</span><span class="nv">INSTALL_FOLDER</span><span class="k">}</span><span class="s2">"</span> | egrep <span class="nt">-o</span> <span class="s2">"cuda-[0-9]+</span><span class="se">\\</span><span class="s2">.[0-9]+$"</span> | <span class="k">while </span><span class="nb">read</span> <span class="nt">-r</span> line<span class="p">;</span> <span class="k">do
        </span><span class="nb">echo</span> <span class="s2">"* </span><span class="k">${</span><span class="nv">line</span><span class="k">}</span><span class="s2">"</span>
    <span class="k">done
    </span><span class="nb">set</span> +e
    <span class="k">return</span>
<span class="c"># otherwise, check whether there is an installation of the requested CUDA version</span>
<span class="k">elif</span> <span class="o">[[</span> <span class="o">!</span> <span class="nt">-d</span> <span class="s2">"</span><span class="k">${</span><span class="nv">INSTALL_FOLDER</span><span class="k">}</span><span class="s2">/cuda-</span><span class="k">${</span><span class="nv">TARGET_VERSION</span><span class="k">}</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"No installation of CUDA </span><span class="k">${</span><span class="nv">TARGET_VERSION</span><span class="k">}</span><span class="s2"> has been found!"</span>
    <span class="nb">set</span> +e
    <span class="k">return
fi</span>

<span class="c"># the path of the installation to use</span>
<span class="nv">cuda_path</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">INSTALL_FOLDER</span><span class="k">}</span><span class="s2">/cuda-</span><span class="k">${</span><span class="nv">TARGET_VERSION</span><span class="k">}</span><span class="s2">"</span>

<span class="c"># filter out those CUDA entries from the PATH that are not needed anymore</span>
<span class="nv">path_elements</span><span class="o">=(</span><span class="k">${</span><span class="nv">PATH</span><span class="p">//</span>:/<span class="p"> </span><span class="k">}</span><span class="o">)</span>
<span class="nv">new_path</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">cuda_path</span><span class="k">}</span><span class="s2">/bin"</span>
<span class="k">for </span>p <span class="k">in</span> <span class="s2">"</span><span class="k">${</span><span class="nv">path_elements</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span> <span class="k">do
    if</span> <span class="o">[[</span> <span class="o">!</span> <span class="k">${</span><span class="nv">p</span><span class="k">}</span> <span class="o">=</span>~ ^<span class="k">${</span><span class="nv">INSTALL_FOLDER</span><span class="k">}</span>/cuda <span class="o">]]</span><span class="p">;</span> <span class="k">then
        </span><span class="nv">new_path</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">new_path</span><span class="k">}</span><span class="s2">:</span><span class="k">${</span><span class="nv">p</span><span class="k">}</span><span class="s2">"</span>
    <span class="k">fi
done</span>

<span class="c"># filter out those CUDA entries from the LD_LIBRARY_PATH that are not needed anymore</span>
<span class="nv">ld_path_elements</span><span class="o">=(</span><span class="k">${</span><span class="nv">LD_LIBRARY_PATH</span><span class="p">//</span>:/<span class="p"> </span><span class="k">}</span><span class="o">)</span>
<span class="nv">new_ld_path</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">cuda_path</span><span class="k">}</span><span class="s2">/lib64:</span><span class="k">${</span><span class="nv">cuda_path</span><span class="k">}</span><span class="s2">/extras/CUPTI/lib64"</span>
<span class="k">for </span>p <span class="k">in</span> <span class="s2">"</span><span class="k">${</span><span class="nv">ld_path_elements</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span> <span class="k">do
    if</span> <span class="o">[[</span> <span class="o">!</span> <span class="k">${</span><span class="nv">p</span><span class="k">}</span> <span class="o">=</span>~ ^<span class="k">${</span><span class="nv">INSTALL_FOLDER</span><span class="k">}</span>/cuda <span class="o">]]</span><span class="p">;</span> <span class="k">then
        </span><span class="nv">new_ld_path</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">new_ld_path</span><span class="k">}</span><span class="s2">:</span><span class="k">${</span><span class="nv">p</span><span class="k">}</span><span class="s2">"</span>
    <span class="k">fi
done</span>

<span class="c"># update environment variables</span>
<span class="nb">export </span><span class="nv">CUDA_HOME</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">cuda_path</span><span class="k">}</span><span class="s2">"</span>
<span class="nb">export </span><span class="nv">CUDA_ROOT</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">cuda_path</span><span class="k">}</span><span class="s2">"</span>
<span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">new_ld_path</span><span class="k">}</span><span class="s2">"</span>
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">new_path</span><span class="k">}</span><span class="s2">"</span>

<span class="nb">echo</span> <span class="s2">"Switched to CUDA </span><span class="k">${</span><span class="nv">TARGET_VERSION</span><span class="k">}</span><span class="s2">."</span>

<span class="nb">set</span> +e
<span class="k">return</span>
</code></pre></div></div> <h2 id="conda">Conda</h2> <p><code class="language-plaintext highlighter-rouge">Anaconda</code> 和 <code class="language-plaintext highlighter-rouge">Miniconda</code> 正常安装即可，包括<code class="language-plaintext highlighter-rouge">换源</code>也是没问题的。目前<code class="language-plaintext highlighter-rouge">Miniconda</code>挺爽的，小小的也很可爱！ <a href="https://docs.anaconda.net.cn/miniconda">Miniconda</a></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 创建文件夹</span>
<span class="nb">mkdir </span>miniconda3
<span class="nb">cd </span>miniconda3/
<span class="c"># 下载miniconda</span>
wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
<span class="c"># 运行安装</span>
bash Miniconda3-latest-Linux-x86_64.sh
<span class="c"># 让你的bash前面出现当前环境，例如：(base)</span>
<span class="nb">eval</span> <span class="s2">"</span><span class="si">$(</span>/home/lvzhiwei/miniconda3/bin/conda shell.bash hook<span class="si">)</span><span class="s2">"</span>
<span class="c"># 让conda在你的环境变量里面打上烙印，不用担心，不会修改全局变量</span>
conda init
</code></pre></div></div> <h2 id="apt">APT？</h2> <p>这个时候问题来了，APT没换源啊？ 求你的师兄去给你换源，没有sudo只能临时指定。 holyshit，原来大多数情况下你没有<code class="language-plaintext highlighter-rouge">sudo</code>你根本没法<code class="language-plaintext highlighter-rouge">apt install</code>，因为要写你没权限的文件</p> <h2 id="喂谁在用显卡">喂？谁在用显卡</h2> <p>这里介绍一些监看命令，帮你搞清楚谁在用显卡，并检验你能不能得罪得起<code class="language-plaintext highlighter-rouge">kill</code>掉他们的进程 <code class="language-plaintext highlighter-rouge">nvidia-smi</code>太基础了，这里介绍一种持续刷新的办法<code class="language-plaintext highlighter-rouge">watch</code> <code class="language-plaintext highlighter-rouge">~~视监你的师兄们~~</code></p> <h3 id="nvidia-smi">nvidia-smi</h3> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 每隔2秒刷新一次，每次只在固定位置刷新</span>
watch <span class="nt">-n</span> 2 <span class="nt">-d</span> nvidia-smi
</code></pre></div></div> <h3 id="根据上面nvidia-smi查到的pid查是谁的进程ps命令">根据上面<code class="language-plaintext highlighter-rouge">nvidia-smi</code>查到的PID，查是谁的进程（PS命令）</h3> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 查询是谁的进程以及开始时间</span>
ps <span class="nt">-p</span> <span class="o">[</span>PID] <span class="nt">-o</span> <span class="nv">user</span><span class="o">=</span>,lstart<span class="o">=</span>
</code></pre></div></div> <p>例如：</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>base<span class="o">)</span> you@your_lab:~<span class="nv">$ </span>ps <span class="nt">-p</span> 2662726 <span class="nt">-o</span> <span class="nv">user</span><span class="o">=</span>,lstart<span class="o">=</span>
DaShiXiong+ Sun Jan  5 15:25:48 2025
</code></pre></div></div> <p>我写了个程序，可以一键查询哪些人在用哪张显卡： <code class="language-plaintext highlighter-rouge">touch check.sh</code>、<code class="language-plaintext highlighter-rouge">./check.sh</code></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="c"># 获取 nvidia-smi 输出中的 PID 列（排除表头）</span>
<span class="nv">pids</span><span class="o">=</span><span class="si">$(</span>nvidia-smi <span class="nt">--query-compute-apps</span><span class="o">=</span>pid <span class="nt">--format</span><span class="o">=</span>csv,noheader<span class="si">)</span>

<span class="c"># 检查是否有进程在 GPU 上运行</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$pids</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"No processes are running on the GPU."</span>
    <span class="nb">exit </span>1
<span class="k">fi</span>

<span class="c"># 输出表头</span>
<span class="nb">printf</span> <span class="s2">"%-10s %-20s %-25s %-5s</span><span class="se">\n</span><span class="s2">"</span> <span class="s2">"PID"</span> <span class="s2">"USER"</span> <span class="s2">"CREATED"</span> <span class="s2">"GPU"</span>

<span class="c"># 遍历每个 PID，查找进程的用户、GPU 和显存使用情况</span>
<span class="k">while </span><span class="nb">read </span>pid<span class="p">;</span> <span class="k">do</span>
    <span class="c"># 获取进程所属的用户</span>
    <span class="nv">user</span><span class="o">=</span><span class="si">$(</span>ps <span class="nt">-p</span> <span class="nv">$pid</span> <span class="nt">-o</span> <span class="nv">user</span><span class="o">=</span><span class="si">)</span>
    
    <span class="c"># 获取进程创建时间</span>
    <span class="nv">created</span><span class="o">=</span><span class="si">$(</span>ps <span class="nt">-p</span> <span class="nv">$pid</span> <span class="nt">-o</span> <span class="nv">lstart</span><span class="o">=</span><span class="si">)</span>
    
    <span class="c"># 获取该进程正在使用的 GPU</span>
    <span class="nv">gpu</span><span class="o">=</span><span class="si">$(</span>nvidia-smi pmon <span class="nt">-c</span> 1 | <span class="nb">grep</span> <span class="nv">$pid</span> | <span class="nb">awk</span> <span class="s1">'{print $1}'</span><span class="si">)</span>
    
    <span class="c"># 使用 printf 格式化输出，确保对齐</span>
    <span class="nb">printf</span> <span class="s2">"%-10s %-20s %-25s %-5s</span><span class="se">\n</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$pid</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$user</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$created</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$gpu</span><span class="s2">"</span>
<span class="k">done</span> <span class="o">&lt;&lt;&lt;</span> <span class="s2">"</span><span class="nv">$pids</span><span class="s2">"</span>
</code></pre></div></div> <h2 id="vim">Vim</h2> <p>修改文件必备</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim ~/.vnc/xstartup
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">i</code>编辑、 <code class="language-plaintext highlighter-rouge">esc</code>退出、 <code class="language-plaintext highlighter-rouge">:wq</code>保存</p>]]></content><author><name></name></author><category term="Experience"/><category term="Remote"/><category term="Desktop"/><category term="Ubuntu"/><category term="Server"/><summary type="html"><![CDATA[记录我在实验室小心翼翼的使用A800]]></summary></entry><entry><title type="html">ISAAC SIM 安装</title><link href="https://son4ta.github.io/blog/2024/isaac/" rel="alternate" type="text/html" title="ISAAC SIM 安装"/><published>2024-12-19T21:32:13+00:00</published><updated>2024-12-19T21:32:13+00:00</updated><id>https://son4ta.github.io/blog/2024/isaac</id><content type="html" xml:base="https://son4ta.github.io/blog/2024/isaac/"><![CDATA[<p>这里假设你在创建环境时已经搞定了pytorch、cuda，没有的话，安装最高版本就行（目前是2.4.0）</p> <p><a href="https://isaac-sim.github.io/IsaacLab/main/source/setup/installation/pip_installation.html">具体教程</a></p> <h2 id="首先pip安装issac-sim">首先，pip安装Issac Sim</h2> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># pip install torch==2.4.0 --index-url https://download.pytorch.org/whl/cu118</span>

pip <span class="nb">install</span> <span class="nt">--upgrade</span> pip

pip <span class="nb">install </span><span class="nv">isaacsim</span><span class="o">==</span>4.2.0.2 isaacsim-extscache-physics<span class="o">==</span>4.2.0.2 isaacsim-extscache-kit<span class="o">==</span>4.2.0.2 isaacsim-extscache-kit-sdk<span class="o">==</span>4.2.0.2 <span class="nt">--extra-index-url</span> https://pypi.nvidia.com
<span class="c"># 最小安装包</span>
pip <span class="nb">install </span>isaacsim-rl isaacsim-replicator isaacsim-extscache-physics isaacsim-extscache-kit-sdk isaacsim-extscache-kit isaacsim-app <span class="nt">--extra-index-url</span> https://pypi.nvidia.com

<span class="c">#测试是否安装成功</span>
isaacsim 
<span class="c">#没有root权限的话 isaacsim --allow-root</span>
</code></pre></div></div> <p>然后同意协议，等一会，他会下载一些注册表之类的东西</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>By installing or using Isaac Sim, I agree to the terms of NVIDIA OMNIVERSE LICENSE AGREEMENT <span class="o">(</span>EULA<span class="o">)</span>
<span class="k">in </span>https://docs.omniverse.nvidia.com/isaacsim/latest/common/NVIDIA_Omniverse_License_Agreement.html

Do you accept the EULA? <span class="o">(</span>Yes/No<span class="o">)</span>: Yes

<span class="o">[</span>Info] <span class="o">[</span>carb] Logging to file: /root/.nvidia-omniverse/logs/Kit/omni.app.mini/0.1/kit_20241220_101512.log
2024-12-20 02:15:12 <span class="o">[</span>0ms] <span class="o">[</span>Warning] <span class="o">[</span>omni.kit.app.plugin] No crash reporter present, dumps uploading isn<span class="s1">'t available.
[0.074s] Failed to solve some dependencies locally, syncing with extension registry...
[0.076s] [ext: omni.kit.async_engine-0.0.1] startup
[0.081s] [ext: omni.client-1.2.0] startup
[0.131s] [ext: omni.kit.registry.nucleus-0.0.0] startup
# ......
[7042.665s] [ext: omni.kit.clipboard-1.0.4] startup
[7042.666s] [ext: omni.kit.window.extensions-1.4.11] startup
[7042.715s] [ext: omni.app.mini-0.1.1] startup
[7042.733s] app ready
嫩久啊
</span></code></pre></div></div> <h2 id="然后是isaac-lab">然后是Isaac Lab</h2> <p>说在前面：<a href="https://blog.csdn.net/qq_30545831/article/details/98944572">git 克隆第三方库 有的时候需要ssh key 权限 有的时候又不要 ，怎么回事呢</a> 公开库的克隆是可以不要权限的，但是你得找到长的像这样的地址：</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/CodeHubApp/CodeHub.git   //这种方法不需要ssh key权限
git clone git@github.com:CodeHubApp/CodeHub.git       //这种克隆方法，你需要把自己的key添加到别人的远程库里面
</code></pre></div></div> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/isaac-sim/IsaacLab.git
<span class="c"># 我在这里出现了git网络错误，但是过一会又好了，推测需要设置host，即修改etc/host文件</span>
<span class="c"># 可以试试http git clone http://github.com/isaac-sim/IsaacLab.git</span>

<span class="nb">sudo </span>apt <span class="nb">install </span>cmake build-essential
</code></pre></div></div> <p>然后安装RL框架，这里是可选的将安装所有学习框架</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>isaaclab
<span class="c"># 有可能会-bash: ./isaaclab.sh: Permission denied</span>
<span class="c"># chmod -R 777 isaaclab.sh # sudo chmod -R 777 isaaclab.sh</span>
<span class="c"># 全部框架</span>
./isaaclab.sh <span class="nt">--install</span> <span class="c"># or "./isaaclab.sh -i"</span>
<span class="c"># 只安装rl_games</span>
./isaaclab.sh <span class="nt">--install</span> rl_games
<span class="c"># 可选：rsl_rl  ​sb3  ​skrl  robomimic  none</span>

<span class="c"># 验证安装</span>
<span class="c"># Option 1: Using the isaaclab.sh executable</span>
<span class="c"># note: this works for both the bundled python and the virtual environment</span>
./isaaclab.sh <span class="nt">-p</span> <span class="nb">source</span>/standalone/tutorials/00_sim/create_empty.py
<span class="c"># Option 2: Using python in your virtual environment</span>
python <span class="nb">source</span>/standalone/tutorials/00_sim/create_empty.py

</code></pre></div></div> <h2 id="机械臂例程">机械臂例程</h2> <p>这里参考<a href="https://github.com/fan-ziqi/robot_lab">robot_lab</a></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 独立于 Isaac Lab 安装克隆存储库（即在目录外）IsaacLab</span>
git clone https://github.com/fan-ziqi/robot_lab.git
<span class="c"># 使用安装了 Isaac Lab 的 python 解释器，安装库</span>
python <span class="nt">-m</span> pip <span class="nb">install</span> <span class="nt">-e</span> ./exts/robot_lab
<span class="c"># 通过运行以下命令打印扩展中的所有可用环境，验证扩展是否已正确安装：</span>
python scripts/tools/list_envs.py
</code></pre></div></div> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python scripts/rsl_rl/base/train.py <span class="nt">--task</span> RobotLab-Isaac-Velocity-Flat-Unitree-G1-v0 <span class="nt">--headless</span> <span class="nt">--video</span> <span class="nt">--video_length</span> 100 <span class="nt">--video_interval</span> 500 <span class="nt">--num_envs</span> 32 <span class="nt">--max_iterations</span> 10000
python3 scripts/rsl_rl/train.py <span class="nt">--task</span> Template-Isaac-Reach-UR10-v0 <span class="nt">--num_envs</span> 4096 <span class="nt">--headless</span> <span class="nt">--video</span> <span class="nt">--video_length</span> 100 <span class="nt">--max_iterations</span> 10
</code></pre></div></div>]]></content><author><name></name></author><category term="Experience"/><category term="Robotic"/><category term="Issac"/><category term="RL"/><summary type="html"><![CDATA[记录我在服务器上安装issac sim与lab]]></summary></entry><entry><title type="html">【FunHPC服务器远程桌面】安装x11、桌面环境和vncserver</title><link href="https://son4ta.github.io/blog/2024/ubuntu-desktop/" rel="alternate" type="text/html" title="【FunHPC服务器远程桌面】安装x11、桌面环境和vncserver"/><published>2024-12-19T21:32:13+00:00</published><updated>2024-12-19T21:32:13+00:00</updated><id>https://son4ta.github.io/blog/2024/ubuntu-desktop</id><content type="html" xml:base="https://son4ta.github.io/blog/2024/ubuntu-desktop/"><![CDATA[<p>我叼，没桌面太难受了，怎么办？</p> <p><a href="https://www.funhpc.com/?msclkid=279b82507c861dc09fbee5678c99ce10#/documentation/Exampleflow/vncserver">具体教程，FunHPC官方文档</a></p> <h2 id="首先pip安装x11桌面环境和tightvncserver">首先，pip安装x11、桌面环境和tightvncserver</h2> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt-get upgrade
<span class="c"># 安装x11</span>
apt-get update <span class="o">&amp;&amp;</span> apt-get <span class="nb">install </span>xorg openbox <span class="nt">-y</span>
<span class="c"># 安装面环境</span>
apt-get update <span class="o">&amp;&amp;</span> apt-get <span class="nb">install </span>xfce4 xfce4-goodies <span class="nt">-y</span>
<span class="c"># 安装tightvncserver</span>
apt-get <span class="nb">install </span>tightvncserver <span class="nt">-y</span>
<span class="c"># vncserver 进程需要依赖用户环境变量 USER</span>
<span class="nb">export </span><span class="nv">USER</span><span class="o">=</span>root 
</code></pre></div></div> <h2 id="vnc配置">VNC配置</h2> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 当输入完之后继续在终端输入vncserver，用来配置密码</span>
vncserver
...配置密码

<span class="c"># 停止刚刚新建的虚拟化桌面 配置VNC Server</span>
vncserver <span class="nt">-kill</span> :1
</code></pre></div></div> <h2 id="配置vnc-server">配置VNC Server</h2> <p>修改xstartup文件</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim ~/.vnc/xstartup
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">i</code>编辑、 <code class="language-plaintext highlighter-rouge">esc</code>退出、 <code class="language-plaintext highlighter-rouge">:wq</code>保存</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 将下面的内容加入到xstartup文件的后面</span>
xrdb <span class="nv">$HOME</span>/.Xresources 
startxfce4 &amp;
</code></pre></div></div> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x ~/.vnc/xstartup
</code></pre></div></div> <p>启动新的虚拟化桌面</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vncserver <span class="nt">-geometry</span> 1280x960
</code></pre></div></div> <h2 id="配置本地计算机">配置<code class="language-plaintext highlighter-rouge">本地</code>计算机</h2> <p>请注意！是本地，即你的电脑，笨蛋</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-p</span> 端口号 <span class="nt">-NL</span> 5901:localhost:5901 网址
<span class="c"># eg</span>
ssh <span class="nt">-p</span> 41536 <span class="nt">-NL</span> 5901:localhost:5901 root@5fwng6ia9oqm2c1nsnow.deepln.com
</code></pre></div></div> <p>当你输入密码后，什么也不显示也没有发生报错，就表示已经完成本地端口转发。</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:<span class="se">\U</span>sers<span class="se">\x</span>xxx&gt;ssh <span class="nt">-p</span> 41536 <span class="nt">-NL</span> 5901:localhost:5901 root@5fwng6ia9oqm2c1nsnow.deepln.com
The authenticity of host <span class="s1">'[5fwng6ia9oqm2c1nsnow.deepln.com]:41536 ([111.6.167.250]:41536)'</span> can<span class="s1">'t be established.
ED25519 key fingerprint is SHA256:P9xKXT5+v0JHtUvyqT3E0zlAA1p0UbLn2J5c2tFsoN8.
This key is not known by any other names.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '</span><span class="o">[</span>5fwng6ia9oqm2c1nsnow.deepln.com]:41536<span class="s1">' (ED25519) to the list of known hosts.
root@5fwng6ia9oqm2c1nsnow.deepln.com'</span>s password:
Permission denied, please try again.
root@5fwng6ia9oqm2c1nsnow.deepln.com<span class="s1">'s password:（右键可以复制）
# 这里什么都没有，只有回车，就对了
</span></code></pre></div></div> <h2 id="本地安装vcn">本地安装VCN</h2> <p><a href="https://www.realvnc.com/en/connect/download/viewer">本地安装VCN Viewer</a> 打开VNC Viewer，输入VNC Viewer及用户名。</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#输入VNC Viewer及Name</span>
VNC Viewer:localhost:5901
Name:root
</code></pre></div></div> <p>输入密码，自此，完成了VNC可视化容器实例。</p>]]></content><author><name></name></author><category term="Experience"/><category term="Remote"/><category term="Desktop"/><category term="Ubuntu"/><summary type="html"><![CDATA[记录我在FunHPC服务器上安装远程桌面]]></summary></entry><entry><title type="html">记录我在怎么调查文献/综述</title><link href="https://son4ta.github.io/blog/2024/survey/" rel="alternate" type="text/html" title="记录我在怎么调查文献/综述"/><published>2024-11-28T17:32:13+00:00</published><updated>2024-11-28T17:32:13+00:00</updated><id>https://son4ta.github.io/blog/2024/survey</id><content type="html" xml:base="https://son4ta.github.io/blog/2024/survey/"><![CDATA[<p>现在假设，你跟写这篇文章3天前的我一样迷茫，累的嘴角流口水，你应该遵循什么样的标准流程去搜索文献呢？ 这里我们以我最近的方向为例，我现在需要调查<code class="language-plaintext highlighter-rouge">四足机器人</code>这个方向</p> <p>你当然可以、、</p> <h2 id="第一步确定关键词找到一个切入点">第一步——确定关键词找到一个切入点</h2> <p>我现在需要调查<code class="language-plaintext highlighter-rouge">四足机器人</code>，首先我要知道我如何搜索相关的文章， 配合使用<code class="language-plaintext highlighter-rouge">ChatGPT</code>、<code class="language-plaintext highlighter-rouge">腾讯元宝</code>、<code class="language-plaintext highlighter-rouge">有道</code>等工具</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1.Quadrupedal
2.Robots
3.quadruped
</code></pre></div></div> <p>然后用<code class="language-plaintext highlighter-rouge">谷歌学术</code>搜到一些看起来很吊的一篇文章</p> <h2 id="然后是ai工具">然后是AI工具</h2> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>]]></content><author><name></name></author><category term="Experience"/><category term="GPT"/><category term="Prompt"/><category term="LLM"/><summary type="html"><![CDATA[不是哥们，英雄联盟有survey和review这个英雄吗？]]></summary></entry><entry><title type="html">记录我在使用ChatGPT时，觉得效果好的提示词</title><link href="https://son4ta.github.io/blog/2024/prompt/" rel="alternate" type="text/html" title="记录我在使用ChatGPT时，觉得效果好的提示词"/><published>2024-11-28T14:32:13+00:00</published><updated>2024-11-28T14:32:13+00:00</updated><id>https://son4ta.github.io/blog/2024/prompt</id><content type="html" xml:base="https://son4ta.github.io/blog/2024/prompt/"><![CDATA[<p>先来一个<a href="https://markdown.com.cn/basic-syntax/htmls.html">md教程</a></p> <h2 id="提示词">提示词</h2> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Role:

Task:
Instruction：
Request:
Action:
Steps:
Requirements:

Context：
Example:
Input：

Output：

</code></pre></div></div> <h2 id="搜索文献">搜索文献</h2> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Role:

你是一名多模态翻译研究的资深专家，专注于该领域的前沿发展与研究进展。

Task:

请通过联网功能，提供5篇关于“多模态话语分析理论在翻译研究中的应用情况”的代表性权威文献。我们希望通过这些文献了解当前多模态话语分析理论在翻译研究中的应用情况。

Requirements:

（1）数据来源：

   ◦ 请从主流、权威的学术数据库或期刊网站上选择文章。

   ◦ 文章需来自同行评审的期刊或会议论文集。

注意:不要凭空捏造文献

（2）文献选择标准：

   ◦ 高引用率：优先选择引用次数较高的文献，以确保文章的影响力和可信度。

   ◦ 代表性作者：尽量选择由领域内知名学者、理论创始人或有重要贡献的作者撰写的文章。

   ◦ 研究进展：确保文献能够反映多模态翻译研究领域的最新进展或关键理论。

Output：

   ◦ 每篇文献应包含以下信息：

       ▪ 文章摘要。

       ▪ 文章来源链接，以便查阅全文。
</code></pre></div></div> <p>重复上述操作，获取更多文献······</p> <h2 id="分析综述文献todo能不能不上传附件">分析、综述文献（TODO：能不能不上传附件，）</h2> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Task:

请你帮助我总结并分析附件中9篇文章的内容，并撰写文献综述，重点聚焦于多模态话语分析理论与翻译研究。

Request:

（1）文章内容总结与分类:

对每篇文章的核心内容进行简明扼要的总结。

根据文章的主题，将9篇文章的内容进行分类，分类数量不超过3个。避免分类的交叉和重复。

每个分类下请注明文章的来源信息（包括作者及年份）。


（2）文献综述撰写:

基于分类撰写一个逻辑连贯的文献综述段落，重点关注多模态话语分析理论与翻译研究。

文献综述应包括以下内容：

国外对多模态话语分析理论的研究现状，分类情况及各分类的主要内容。

多模态话语分析理论在翻译研究中的应用。

当前研究中可能存在的不足或空白。

Action:

（1）对9篇文章进行内容总结与分类。

（2）根据分类及文章内容撰写文献综述，结合“多模态话语分析理论与翻译研究”的主题。

Context:

这9篇文章将以附件形式提供给你，你仅需基于文章本身的内容进行总结与分析，不进行超出范围的拓展分析。重点放在国外学者对多模态话语分析理论的研究以及其在翻译研究中的应用。

Example:

文献综述分为两段：

第一段为：国外关于多模态话语分析理论的研究可以分为X种情况，包括（分类1、分类2等）。在每个分类中，国外学者主要关注了A、B、C等内容。例如，某某学者（年份）提出了……。整体来看，国外学者普遍将多模态话语分析理论应用于如下几类翻译研究：文本翻译、视听翻译、跨文化翻译等。

第二段为：然而，现有研究中仍然存在一些空白，主要表现在……。


</code></pre></div></div> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ubuntu:/etc/docker<span class="nv">$ </span><span class="nb">sudo rm </span>daemon.json 
</code></pre></div></div>]]></content><author><name></name></author><category term="Experience"/><category term="GPT"/><category term="Prompt"/><category term="LLM"/><summary type="html"><![CDATA[使用ChatGPT-4o，这是一个实验性的文档，因为之前我其实一直不喜欢这种“提示词工程”，可能真香了hh]]></summary></entry></feed>