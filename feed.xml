<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="cn"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://son4ta.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://son4ta.github.io/" rel="alternate" type="text/html" hreflang="cn"/><updated>2024-11-18T08:24:30+00:00</updated><id>https://son4ta.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">WSL下配置DreamWqa环境</title><link href="https://son4ta.github.io/blog/2024/tabs/" rel="alternate" type="text/html" title="WSL下配置DreamWqa环境"/><published>2024-10-10T14:32:13+00:00</published><updated>2024-10-10T14:32:13+00:00</updated><id>https://son4ta.github.io/blog/2024/tabs</id><content type="html" xml:base="https://son4ta.github.io/blog/2024/tabs/"><![CDATA[<p>Job for docker.service failed because the control process exited with error code. 最后发现是之前用vim创建了个daemon.json</p> <p><a href="https://blog.csdn.net/zwlww1/article/details/129624289#:~:text=提示：Job">解决docker启动报错：Job for docker.service failed because the control process exited with error code-CSDN博客</a></p> <p>解决：</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ubuntu:/etc/docker<span class="nv">$ </span><span class="nb">sudo rm </span>daemon.json 
</code></pre></div></div> <p>启动docker</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> systemctl start docker
</code></pre></div></div> <p>因为正常执行build大概率会因为网络问题翻车</p> <pre>[+] Building 0.3s (3/3) FINISHED                                                                
<font color="#3465A4"> =&gt; [internal] load .dockerignore                                                          0.0s</font>
<font color="#3465A4"> =&gt; =&gt; transferring context: 2B                                                            0.0s</font>
<font color="#3465A4"> =&gt; [internal] load build definition from Dockerfile                                       0.0s</font>
<font color="#3465A4"> =&gt; =&gt; transferring dockerfile: 2.33kB                                                     0.0s</font>
<font color="#CC0000"> =&gt; ERROR [internal] load metadata for nvcr.io/nvidia/pytorch:21.09-py3                    0.3s</font>
------
 &gt; [internal] load metadata for nvcr.io/nvidia/pytorch:21.09-py3:
------
Dockerfile:1
--------------------
   1 | &gt;&gt;&gt; FROM nvcr.io/nvidia/pytorch:21.09-py3
   2 |     
   3 |     # set WORKDIR
--------------------
ERROR: failed to solve: nvcr.io/nvidia/pytorch:21.09-py3: failed to do request: Head &quot;https://nvcr.io/v2/nvidia/pytorch/manifests/21.09-py3&quot;: read tcp 192.168.0.103:44150-&gt;54.148.129.60:443: read: connection reset by peer</pre> <p>所以先安装</p> <p>[ERROR <a href="https://github.com/ifzhang/ByteTrack/issues/189">internal] load metadata for nvcr.io/nvidia/tensorrt:21.09-py3 · Issue #189 · ifzhang/ByteTrack (github.com)</a></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull nvcr.io/nvidia/pytorch:21.09-py3 -–registry-mirror<span class="o">=</span>https://mirror.iscas.ac.cn<span class="o">(</span>国内镜像源地址<span class="o">)</span>
</code></pre></div></div> <p>启动docker</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> vi  /etc/docker/daemon.json
</code></pre></div></div> <p>重启docker</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>service docker restart
</code></pre></div></div> <p>查看docker信息</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker info
</code></pre></div></div> <p>清理docker builder</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker builder prune
</code></pre></div></div> <p>build</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">--network</span> host <span class="nt">-t</span> rl_docker-main <span class="nt">-f</span> S:/Programming/rl_docker-main/Dockerfile S:/Programming/rl_docker-main
</code></pre></div></div> <p><img src="image-20241004013549568.png" alt="image-20241004013549568"/></p> <p>出现这个错误是因为在构建 Docker 镜像时，网络连接到 <code class="language-plaintext highlighter-rouge">http://archive.ubuntu.com/ubuntu</code> 失败，但是不应该啊？</p> <p>记事本打开 <code class="language-plaintext highlighter-rouge">Dockerfile</code> ，发现命令：</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># replace mirror</span>
RUN apt-get <span class="nb">install</span> <span class="nt">-q</span> <span class="nt">-y</span> <span class="nt">--no-install-recommends</span> wget <span class="se">\</span>
<span class="o">&amp;&amp;</span> wget http://archive.ubuntu.com/ubuntu/pool/main/c/ca-certificates/ca-certificates_20230311ubuntu0.20.04.1_all.deb <span class="se">\</span>
...
</code></pre></div></div> <p>于是我直接去网站上查，压根没看到<code class="language-plaintext highlighter-rouge">ca-certificates_20230311ubuntu0.20.04.1_all.deb</code>这个文件，已经过时被删除了</p> <p>官网：<a href="http://archive.ubuntu.com/ubuntu/pool/main/c/ca-certificates/">Index of /ubuntu/pool/main/c/ca-certificates</a></p> <p>阿里云：<a href="http://mirrors.aliyun.com/ubuntu/pool/main/c/ca-certificates/?spm=a2c6h.25603864.0.0.644e1431A2R1g6">ubuntu-pool-main-c-ca-certificates安装包下载_开源镜像站-阿里云 (aliyun.com)</a></p> <p>替换为<code class="language-plaintext highlighter-rouge">ca-certificates_20240203~20.04.1_all.deb</code>版本后解决：</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
<span class="o">&amp;&amp;</span> wget http://mirrors.aliyun.com/ubuntu/pool/main/c/ca-certificates/ca-certificates_20240203~20.04.1_all.deb <span class="se">\</span>
<span class="o">&amp;&amp;</span> dpkg <span class="nt">-i</span> ./ca-certificates_20240203~20.04.1_all.deb
...
</code></pre></div></div> <p>完美解决</p> <p><img src="image-20241004184052786.png" alt="image-20241004184052786"/></p> <p>GPU不可用？</p> <pre><code class="language-apl">WARNING: The NVIDIA Driver was not detected.  GPU functionality will not be available.
</code></pre> <p>build</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">--network</span> host <span class="nt">-t</span> rl_docker-main <span class="nt">-f</span> S:/Programming/rl_docker-main/Dockerfile S:/Programming/rl_docker-main
</code></pre></div></div> <p>运行DreamWaQ</p> <p><a href="https://blog.csdn.net/eye123456789/article/details/120879982#:~:text=为了在Win">docker的安装以及跑本地项目代码步骤说明_docker怎么运行本地代码-CSDN博客</a></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-itd</span>
</code></pre></div></div> <p>WSL安装</p> <p><a href="https://blog.csdn.net/weixin_45840825/article/details/127138564">win11 安装 WSL2 在非 C 盘及配置（图形界面+代理）_wsl不安装在c盘 csdn-CSDN博客</a></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div> <p>docker run ，用docker命令运行run.sh（bash好难搞，曲线救国）</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-it</span> <span class="nt">--rm</span> <span class="nt">-v</span> S:<span class="se">\P</span>rogramming<span class="se">\r</span>l_docker-main:/home/root/rl_ws <span class="nt">--gpus</span><span class="o">=</span>all <span class="nt">--name</span><span class="o">=</span>rl rl_docker-main bash /home/root/rl_ws/setup.sh
</code></pre></div></div> <p>setup.sh里的pip失败</p> <p><img src="image-20241005012110467.png" alt="image-20241005012110467"/></p> <p>注释掉setup.sh里面不存在的文件就行，其实不是不存在，是要下载</p> <p><a href="https://blog.csdn.net/m0_37802038/article/details/134629194">20231126-超详细Isaac Gym安装教程（基于双系统版本）-CSDN博客</a></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
pip <span class="nb">install</span> <span class="nt">-e</span> ./isaacgym/python
pip <span class="nb">install</span> <span class="nt">-e</span> ./rsl_rl
pip <span class="nb">install</span> <span class="nt">-e</span> ./legged_gym

<span class="c"># 安装gym</span>
pip <span class="nb">install</span> <span class="nt">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple gym

<span class="c"># 执行 Python 脚本</span>
python /home/root/rl_ws/run_dreamwaq.py <span class="nt">--headless</span>
...
</code></pre></div></div> <p>最终结果</p> <p><img src="image-20241005021400892.png" alt="image-20241005021400892"/></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">--network</span> host <span class="nt">-t</span> rl_docker-main <span class="nt">-f</span> S:/Programming/rl_docker-main/Dockerfile S:/Programming/rl_docker-main
</code></pre></div></div> <p>build</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">--network</span> host <span class="nt">-t</span> rl_docker-main <span class="nt">-f</span> S:/Programming/rl_docker-main/Dockerfile S:/Programming/rl_docker-main
</code></pre></div></div> <p>build</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">--network</span> host <span class="nt">-t</span> rl_docker-main <span class="nt">-f</span> S:/Programming/rl_docker-main/Dockerfile S:/Programming/rl_docker-main
</code></pre></div></div> <p>build</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">--network</span> host <span class="nt">-t</span> rl_docker-main <span class="nt">-f</span> S:/Programming/rl_docker-main/Dockerfile S:/Programming/rl_docker-main
</code></pre></div></div> <p>build</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">--network</span> host <span class="nt">-t</span> rl_docker-main <span class="nt">-f</span> S:/Programming/rl_docker-main/Dockerfile S:/Programming/rl_docker-main
</code></pre></div></div> <p>build</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">--network</span> host <span class="nt">-t</span> rl_docker-main <span class="nt">-f</span> S:/Programming/rl_docker-main/Dockerfile S:/Programming/rl_docker-main
</code></pre></div></div>]]></content><author><name></name></author><category term="Experience"/><category term="Debug"/><category term="Deploy"/><summary type="html"><![CDATA[WSL下配置DreamWqa环境]]></summary></entry></feed>